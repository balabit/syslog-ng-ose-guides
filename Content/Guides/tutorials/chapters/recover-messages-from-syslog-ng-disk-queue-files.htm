<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="recover-messages-from-syslog-ng-disk-queue-files">
        <h1 name="recover-messages-from-syslog-ng-disk-queue-files">Recover log messages from orphaned disk queue files</h1>
		<div>
        <h6>Overview:</h6>
        <ol>
            <li>
                <p><a href="recover-messages-from-syslog-ng-disk-queue-files.htm">Identify the active queue files</a>
                </p>
            </li>
            <li>
                <p><a href="recover-messages-from-syslog-ng-disk-queue-files.htm">Identify which queue files still hold valid data</a>
                </p>
            </li>
            <li>
                <p><a href="recover-messages-from-syslog-ng-disk-queue-files.htm">Configure a separate syslog instance to send queue files to the processing application</a>
                </p>
            </li>
        </ol>
		</div>
		<div>
        <h6>Steps:</h6>
        <ol>
            <li name="identify-the-active-queue-files">
                <h6>Identify the active queue files</h6>
                <p>The <MadCap:variable name="General.abbrev"></MadCap:variable> application keeps track of active disk queue files, and the internal state of its source drivers in the <span class="Code">syslog-ng.persist</span> file. While running, <MadCap:variable name="General.abbrev"></MadCap:variable> uses the <span class="Code">mmap()</span> system call to map the file's contents into physical memory. This means that the actual contents of the file may not always contain the up-to-date internal state of <MadCap:variable name="General.abbrev"></MadCap:variable>. For this reason, while you are working with the <span class="Code">syslog-ng.persist</span> file, stop <MadCap:variable name="General.abbrev"></MadCap:variable>.</p>
                <p>The following command lists the destinations and the related queue files.</p><pre># /opt/syslog-ng/bin/persist-tool dump <MadCap:conditionalText MadCap:conditions="General.PE">/opt/syslog-ng/var/syslog-ng.persist</MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="General.OSE">/var/lib/syslog-ng/syslog-ng.persist</MadCap:conditionalText> | fgrep qfile</pre>
                <p>The output if this command is similar to the following:</p><pre>afsocket_dd_qfile(stream,127.0.0.1:601) = { "queue_file": "\/\/syslog-ng-00001.rqf" }</pre>
            </li>
            <li name="identify-valid-data">
                <h6>Identify which queue files hold valid data</h6>
                <p>To identify which queue files hold unsent data, use the following two commands for your disk queue files (the example shows a single file called <span class="Code">syslog-ng-00000.rqf</span>):</p><pre># <MadCap:conditionalText MadCap:conditions="General.PE">/opt/syslog-ng/bin/dqtool</MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="General.OSE">dqtool</MadCap:conditionalText> info syslog-ng-00000.rqf
# /opt/syslog-ng/bin/dqtool cat syslog-ng-00000.rqf</pre><pre>root@server:/# <MadCap:conditionalText MadCap:conditions="General.PE">/opt/syslog-ng/bin/dqtool</MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="General.OSE">dqtool</MadCap:conditionalText> info syslog-ng-00000.rqf
Reliable disk-buffer state loaded; filename='syslog-ng-00000.rqf', queue_length='138', size='71962'
root@server:/# <MadCap:conditionalText MadCap:conditions="General.PE">/opt/syslog-ng/bin/dqtool</MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="General.OSE">dqtool</MadCap:conditionalText> cat syslog-ng-00000.rqf | tail -n 3
Reliable disk-buffer state loaded; filename='syslog-ng-00000.rqf', queue_length='138', size='71962'
Feb 20 17:22:14.776 server -- MARK --
Feb 20 17:42:14.777 server -- MARK --
Feb 20 18:02:14.778 server -- MARK --
root@server:/#</pre>
                <p>To identify queue files with valid data in them, use the following command. This command prints the names of disk queue files which hold valid data.</p><pre># for q in *.rqf; do <MadCap:conditionalText MadCap:conditions="General.PE">/opt/syslog-ng/bin/dqtool</MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="General.OSE">dqtool</MadCap:conditionalText> info ${q} 2&gt;ampersand1 | fgrep queue_length; done | awk -F \' '{ if ($4 &gt; 0) { print $2; } }'</pre>
                <p>Verify that the contents of the queue files are indeed valid. If you want to forward the messages to an application, verify that the receiving application will be able to parse them.</p>
            </li>
            <li name="send-queue-files">
                <h6>Configure a separate instance of <MadCap:variable name="General.abbrev"></MadCap:variable> to send queue files to the processing application</h6>
                <p>In order to process the queue files that contain valid data, you must configure and temporarily run a separate <MadCap:variable name="General.abbrev"></MadCap:variable> instance.</p>
                <p>The configuration must include a source that will definitely not receive any logs, connected to a network destination that points to the desired IP address and port number, and has disk queue configured. When you start <MadCap:variable name="General.abbrev"></MadCap:variable> with this configuration, it will generate a persist file that you can modify later on.</p>
                <ol>
                    <li>
                        <p>Create an appropriate configuration for your environment that matches the above criteria. For example:</p>
                        <informalexample><pre>@version:6.0
@include "scl.conf"
#
# sample configuration file for syslog-ng on AIX
# users should customize to fit their needs
#

options {
        threaded(yes);
        keep-hostname(yes);
        keep-timestamp(yes);
};

source nofile {
        file (
                "/no_such_file_or.dir"
        );
};

destination extra_listener {
        syslog(
                "127.0.0.1"
                port(10641)
                disk-buffer(
                        disk-buf-size(1048576)
                        reliable(yes)
                )
        );
};

log {
        source(nofile);
        destination(extra_listener);
};</pre>
                        </informalexample>
                    </li>
                    <li>
						<div>
                        <h6>Start <MadCap:variable name="General.abbrev"></MadCap:variable> briefly from the command-line to generate a persist file.</h6>
                        <p>Make sure to use the configuration file you created in the previous step using the <b class="Code">--cfgfile</b> option, and to use a non-existing persist file (to avoid overwriting the persist file of your regular <MadCap:variable name="General.abbrev"></MadCap:variable> instance). The following command uses the <span class="Code">/root/syslog/syslog-ng.conf</span> configuration file, and the <span class="Code">/root/syslog/syslog-ng.persist</span> persist file.</p><pre>root@server:~/syslog# /opt/syslog-ng/sbin/syslog-ng --foreground --enable-core --no-caps --cfgfile /root/syslog/syslog-ng.conf --pidfile /root/syslog/syslog-ng.sender.pid --control /root/syslog/syslog-ng.sender.ctl --persist-file /root/syslog/syslog-ng.persist --qdisk-dir /root/syslog/</pre>
                        <p>After <MadCap:variable name="General.abbrev"></MadCap:variable> starts up and generates the persist file, press<span class="Code">CTRL+C</span>to stop <MadCap:variable name="General.abbrev"></MadCap:variable>.</p>
						</div>
                    </li>
                    <li>
						<div>
                        <h6>Edit the persist file to include the location of the orphaned disk queue files.</h6>
                        <p>Use the following <b class="Code">/opt/syslog-ng/bin/persist-tool dump /root/syslog/syslog-ng.persist</b> command to display the contents of the persist file generated in the previous step, for example:</p><pre>root@server:~/syslog# /opt/syslog-ng/bin/persist-tool dump /root/syslog/syslog-ng.persist
afsocket_dd_qfile(stream,127.0.0.1:10641) = { "queue_file": "\/root\/syslog\/\/syslog-ng-00000.rqf" }

affile_sd_curpos(/no_such_file_or.dir) = { "version": 1, "big_endian": false, "raw_buffer_leftover_size": 0, "buffer_pos": 0, "pending_buffer_end": 0, "buffer_size": 0, "buffer_cached_eol": 0, "pending_buffer_pos": 0, "raw_stream_pos": 0, "pending_raw_stream_pos": 0, "raw_buffer_size": 0, "pending_raw_buffer_size": 0, "file_size": 0, "file_inode": 0, "run_id": 1 }

run_id = { "value": "01 00 00 00" }</pre>
                        <p>Issue the following commands to modify the persist file.</p><pre>/opt/syslog-ng/bin/persist-tool dump /root/syslog/syslog-ng.persist &gt; persist.dump
sed -i -e 's:syslog-ng-00000:full:' -e '/^run_id/ d' -e '/^$/ d' persist.dump
rm syslog-ng.persist
/opt/syslog-ng/bin/persist-tool add persist.dump -o .</pre>
                        <p>As a result, references to the <span class="Code">syslog-ng-00000.rqf</span> disk queue file should change to <span class="Code">full.rqf</span>. Display the contents of the persist file again to verify this.</p><pre>root@server:~/syslog# /opt/syslog-ng/bin/persist-tool dump /root/syslog/syslog-ng.persist
affile_sd_curpos(/no_such_file_or.dir) = { "version": 1, "big_endian": false, "raw_buffer_leftover_size": 0, "buffer_pos": 0, "pending_buffer_end": 0, "buffer_size": 0, "buffer_cached_eol": 0, "pending_buffer_pos": 0, "raw_stream_pos": 0, "pending_raw_stream_pos": 0, "raw_buffer_size": 0, "pending_raw_buffer_size": 0, "file_size": 0, "file_inode": 0, "run_id": 1 }

afsocket_dd_qfile(stream,127.0.0.1:10641) = { "queue_file": "\/root\/syslog\/\/full.rqf" }</pre>
					</div>
                    </li>
                    <li>
						<div>
                        <h6>Rename the queue file to the filename set in the persist file previously.</h6><pre>root@server:~/syslog# ls -l *.rqf
-rw------- 1 root root  4096 febr  21 23:57 full.rqf
-rw------- 1 root root 78506 febr  22 20:45 syslog-ng-00000.rqf
root@server:~/syslog# cp /syslog-ng-00000.rqf full.rqf
root@server:~/syslog# ls -l *.rqf
-rw------- 1 root root 78506 febr  22 20:45 full.rqf
-rw------- 1 root root 78506 febr  22 20:45 syslog-ng-00000.rqf</pre>
						</div>
                    </li>
                    <li>
						<div>
                        <h6>Start the new syslog-ng instance</h6>
                        <p>Start the new syslog-ng instance, and let it run until size of the queue file decreases to 4 KB. After that, press<span class="Code">Ctrl+C</span>to stop the syslog-ng instance.</p><pre>/opt/syslog-ng/sbin/syslog-ng --foreground --enable-core --no-caps --cfgfile /root/syslog/syslog-ng.conf --pidfile /root/syslog/syslog-ng.sender.pid --control /root/syslog/syslog-ng.sender.ctl --persist-file /root/syslog/syslog-ng.persist --qdisk-dir /root/syslog/
^C
root@server:~/syslog# ls -l *.rqf
-rw------- 1 root root  4096 febr  22 22:19 full.rqf
-rw------- 1 root root 78506 febr  22 20:45 syslog-ng-00000.rqf
root@server:~/syslog#</pre>
                        <p>If you wish to verify or debug <MadCap:variable name="General.abbrev"></MadCap:variable> sending the queue file contents, use the additional <b class="Code">--verbose --debug --stderr</b> options, for example:</p><pre>/opt/syslog-ng/sbin/syslog-ng --foreground --verbose --debug --stderr --enable-core --no-caps --cfgfile /root/syslog/syslog-ng.conf --pidfile /root/syslog/syslog-ng.sender.pid --control /root/syslog/syslog-ng.sender.ctl --persist-file /root/syslog/syslog-ng.persist --qdisk-dir /root/syslog/</pre>
						</div>
                    </li>
                    <li>
						<div>
                        <h6>Repeat these steps for the other left-over queue files</h6>
                        <p>After you have processed all left-over queue files this way, all the missing recoverable logs should have found their way to their intended destinations.</p>
						</div>
                    </li>
                </ol>
            </li>
        </ol>
		</div>
    </body>
</html>