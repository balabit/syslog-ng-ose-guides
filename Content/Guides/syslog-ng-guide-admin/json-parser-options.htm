<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="" />
    </head>
    <body name="json-parser-options">
        <h1 name="json-parser-options">Options of JSON parsers</h1>
        <p>The JSON parser has the following options.</p>
        <div>
            <h6 name="json-parser-extract-prefix"><a name="json-parser-extract-prefix"></a>extract-prefix()</h6>
            <MadCap:keyword term="extract-prefix()">
            </MadCap:keyword>
            <MadCap:keyword term="extract_prefix()">
            </MadCap:keyword>
            <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" rowsep="0" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
                <tbody>
                    <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                        <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyB-Column1-Body1">Synopsis: 
                                 </td>
                        <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyA-Column1-Body1">extract-prefix()</td>
                    </tr>
                </tbody>
                <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
                </col>
            </table>
            <p><i style="font-style: normal;">Description:</i> Extract only the specified subtree from the JSON message. Use the dot-notation to specify the subtree. The rest of the message will be ignored. For example, assuming that the incoming object is named <span class="Code">msg</span>, the <span class="Code">json-parser(extract-prefix("foo.bar[5]"));</span> parser is equivalent to the <span class="Code">msg.foo.bar[5]</span> javascript code. Note that the resulting expression must be a JSON object in order to extract its members into name-value pairs.</p>
            <p>This feature also works when the top-level object is an array, because you can use an array index at the first indirection level, for example: <span class="Code">json-parser(extract-prefix("[5]"))</span>, which is equivalent to <span class="Code">msg[5]</span>.</p>
            <p>In addition to alphanumeric characters, the key of the JSON object can contain the following characters: <span class="Code">!"#$%&amp;'()*+,-/:;&lt;=&gt;?@\^_`{|}~</span></p>
            <p>It cannot contain the following characters: <span class="Code">.[]</span></p>
            <div class="Example">
                <h6>Example: Convert logstash eventlog format v0 to v1</h6>
                <p>The following parser converts messages in the logstash eventlog v0 format to the v1 format.</p><pre>parser p_jsoneventv0 {
    channel {
        parser {
            json-parser(extract-prefix("@fields"));
        };
        parser {
            json-parser(prefix(".json."));
        };
        rewrite {
            set("1" value("@version"));
            set("${.json.@timestamp}" value("@timestamp"));
            set("${.json.@message}" value("message"));
        };
    };
};</pre>
            </div>
        </div>
        <div>
            <h6 name="json-parser-key-delimiter"><a name="json-parser-key-delimiter"></a>key-delimiter()</h6>
            <MadCap:keyword term="key-delimiter">
            </MadCap:keyword>
            <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" rowsep="0" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
                <tbody>
                    <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                        <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Type:</td>
                        <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">character</td>
                    </tr>
                    <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                        <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyB-Column1-Body1">Default:</td>
                        <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyA-Column1-Body1">.</td>
                    </tr>
                </tbody>
                <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
                </col>
            </table>
            <p><i style="font-style: normal;">Description:</i> The <span class="Code">key-delimiter()</span> option defines the used character when parsing flattened keys. Only single characters are supported.</p>
			<p>Using the <span class="Code">json-parser()</span> without the <span class="Code">key-delimiter()</span> option results in the dot(<span class="Code">.</span>) character being used:</p>
			<p><pre>foo.key="value"</pre></p>
			<p>Using the <span class="Code">json-parser()</span> with the <span class="Code">key-delimiter("~")</span> option results in the defined character being used:</p>
			<p><pre>foo~key="value"</pre></p>
        </div>
        <div>
            <h6 name="json-parser-marker"><a name="json-parser-marker"></a>marker</h6>
            <MadCap:keyword term="marker">
            </MadCap:keyword>
            <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" rowsep="0" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
                <tbody>
                    <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                        <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyB-Column1-Body1">Synopsis: 
                                 </td>
                        <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyA-Column1-Body1">marker()</td>
                    </tr>
                </tbody>
                <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
                </col>
            </table>
            <p><i style="font-style: normal;">Description:</i> Use a marker in case of mixed log messages, to identify JSON encoded messages for the parser.</p>
            <p>Some logging implementations require a marker to be set before the JSON payload. The JSON parser is able to find these markers and parse the message only if it is present.</p>
            <div class="Example">
                <h6>Example: Using the marker option in JSON parser</h6>
                <p>This json parser parses log messages which use the "@cee:" marker in front of the json payload. It inserts "<span class="Code">.cee.</span>" in front of the name of name-value pairs, so later on it is easier to find name-value pairs that were parsed using this parser. (For details on selecting name-value pairs, see <MadCap:xref href="../shared/chunk/option-value-pairs.htm"><span style="color: #04aada;" class="mcFormatColor">value-pairs()</span></MadCap:xref>.)</p><pre>parser {
        json-parser(
            marker("@cee:")
            prefix(".cee.")
        );
    };</pre>
            </div>
        </div>
        <MadCap:snippetBlock src="../shared/chunk/option-parser-prefix.flsnp">
        </MadCap:snippetBlock>
        <MadCap:snippetBlock src="../shared/chunk/no-default-prefix.flsnp" /><pre>parser {
    json-parser(prefix("myprefix."));
};</pre>
        <MadCap:snippetBlock src="../shared/chunk/option-parser-template.flsnp">
        </MadCap:snippetBlock>
    </body>
</html>