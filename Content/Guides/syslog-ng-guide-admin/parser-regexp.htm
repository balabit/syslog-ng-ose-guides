<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="" />
    </head>
    <body name="parser-regexp">
        <h1 name="parser-regexp">Regular expression (regexp) parser</h1>
        <MadCap:keyword term="regexp">
        </MadCap:keyword>
        <MadCap:keyword term="Regular expression parser">
        </MadCap:keyword>
        <MadCap:keyword term="regexp parser">
        </MadCap:keyword>
        <MadCap:keyword term="Regular expression">
        </MadCap:keyword>
        <MadCap:keyword term="parsers:['Regular expression']">
        </MadCap:keyword>
        <p>The <MadCap:variable name="General.abbrev" /> application can parse fields from a message with the help of regular expressions. This can be also achieved with the <span class="Code">match()</span> filter, by setting the store-matches flag, but the <span class="Code">regexp-parser()</span> offers more flexibility, like multiple patterns and setting the prefix of the created name-value pairs.</p>
        <p>For more information about regular expressions in <MadCap:variable name="General.abbrev" />, see <MadCap:xref href="regular-expressions.htm"><span style="color: #04aada;" class="mcFormatColor">Regular expressions</span></MadCap:xref>.</p>
        <p>For example:</p>
        <div>
            <h6>Declaration:</h6><pre>parser p_regexp {
    regexp-parser(
    patterns( ... )
    );
};</pre>
        </div>
        <div class="Example">
            <h6>Example: Using a regexp-parser()</h6>
            <p>In the following example, the incoming log message is the following:</p><pre>Apr 20 11:09:46 test_field -&gt; test_value</pre>
            <p>The regexp-parser inserts the <span class="Code">.regexp.</span> prefix before all extracted name-value pairs. The destination is a file, that uses the format-json template function. Every name-value pair that begins with a dot (<span class="Code">.</span>) character will be written to the file (dot-nv-pairs). The log line connects the source, the parser and the destination.</p><pre>source s_network {
    network(
        port(21514)
        flags(no-parse)
    );
};
parser p_regexp {
    regexp-parser(
        patterns(".*test_field -&gt; (?&lt;test_field&gt;.*)$")
        prefix(".regexp.")
    );
};
destination d_file {
    file(
        "/tmp/test.json"
        template("$(format-json --scope dot-nv-pairs)\n")
    );
};
log {
    source(s_network);
    parser(p_regexp);
    destination(d_file);
};</pre>
            <p>You can also define the parser inline in the log path.</p><pre>source s_network {
    network(
        port(21514)
        flags(no-parse)
    );
};
destination d_file {
    file(
        "/tmp/test.json"
        template("$(format-json --scope dot-nv-pairs)\n")
    );
};
log {
    source(s_network);
    parser{
        regexp-parser(
            patterns(".*test_field -&gt; (?&lt;test_field&gt;.*)$")
            prefix(".regexp.")
        );
    };
    destination(d_file);
};</pre>
            <p>You can set multiple patterns:</p><pre>parser p_regexp {
    regexp-parser(
        patterns(".*test_field -&gt; (?&lt;test_field&gt;.*)$", ".*other_format: (?&lt;foo&gt;.*)$")
        prefix(".regexp.")
    );
};</pre>
        </div>
    </body>
</html>