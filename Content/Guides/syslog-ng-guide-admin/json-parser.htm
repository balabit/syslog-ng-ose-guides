<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body name="json-parser">
        <h1 name="json-parser">JSON parser</h1>
        <MadCap:keyword term="segmenting messages">
        </MadCap:keyword>
        <MadCap:keyword term="JSON parsers">
        </MadCap:keyword>
        <MadCap:keyword term="splitting messages">
        </MadCap:keyword>
        <MadCap:keyword term="parsers:['json-parser']">
        </MadCap:keyword>
        <p>JavaScript Object Notation (JSON) is a text-based open standard designed for human-readable data interchange. It is used primarily to transmit data between a server and web application, serving as an alternative to XML. It is described in <a href="https://tools.ietf.org/html/rfc4627">RFC 4627</a>. The <MadCap:variable name="General.abbrev"></MadCap:variable> application can separate parts of incoming JSON-encoded log messages to name-value pairs. For details on using value-pairs in <MadCap:variable name="General.abbrev"></MadCap:variable> see <MadCap:xref href="concepts-value-pairs.htm"><span style="color: #04aada;" class="mcFormatColor">Structuring macros, metadata, and other value-pairs</span></MadCap:xref>.</p>
        <p>You can refer to the separated parts of the JSON message using the key of the JSON object as a macro. For example, if the JSON contains <span class="Code">{"KEY1":"value1","KEY2":"value2"}</span>, you can refer to the values as <b class="Code">${KEY1}</b> and <b class="Code">${KEY2}</b>. If the JSON content is structured, <MadCap:variable name="General.abbrev"></MadCap:variable> converts it to dot-notation-format. For example, to access the value of the following structure <span class="Code">{"KEY1": {"KEY2": "VALUE"}}</span>, use the <b class="Code">${KEY1.KEY2}</b> macro.</p>
        <table cellspacing="0" class="TableStyle-NoteTable_Yellow_DoNotEdit" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Yellow_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../Resources/Images/Common/caution.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyA-Column2-Body1"><span class="Yellow">Caution: </span>
                        <p>If the names of keys in the JSON content are the same as the names of <MadCap:variable name="General.abbrev"></MadCap:variable> soft macros, the value from the JSON content will overwrite the value of the macro. For example, the <b class="Code">{"PROGRAM":"value1","MESSAGE":"value2"}</b> JSON content will overwrite the <span class="Code">${PROGRAM}</span> and <span class="Code">${MESSAGE}</span> macros. To avoid overwriting such macros, use the <span class="Code">prefix()</span> option.</p>
                        <p>Hard macros cannot be modified, so they will not be overwritten. For details on the macro types, see <MadCap:xref href="macros-hard-vs-soft.htm#macros-hard-vs-soft"><span style="color: #04aada;" class="mcFormatColor">Hard vs. soft macros</span></MadCap:xref>.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="Note">
            <p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> 
			When using the <span class="Code">json-parser()</span>, <MadCap:variable name="General.abbrev"></MadCap:variable> converts all elements of the JSON object to name-value pairs. Any type information carried by the incoming JSON object is preserved, and automatically propagated to other <MadCap:variable name="General.abbrev"></MadCap:variable> components (for example, a destination) if the component supports types. Elements without a type are handled as strings. JSON lists (arrays) are converted to lists, and can be manipulated using the <MadCap:xref href="reference-template-functions.htm#template-function-list"><span style="color: #04aada;" class="mcFormatColor">$(list-*)</span></MadCap:xref> template functions.</p>
            <p>Prior to version 4.0, <MadCap:variable name="General.abbrev"></MadCap:variable> handled all data as string.</p>
			<p>The JSON parser discards messages if they cannot be parsed as JSON messages, therefore acting as a JSON-filter as well.</p>
        </div>
        <p>To create a JSON parser, define a parser that has the <span class="Code">json-parser()</span> option. Defining the prefix and the marker are optional. By default, the parser will process the <span class="Code">${MESSAGE}</span> part of the log message. To process other parts of a log message with the JSON parser, use the <span class="Code">template()</span> option. You can also define the parser inline in the log path.</p>
        <div>
            <h6>Declaration</h6><pre>parser parser_name {
    json-parser(
        marker()
        prefix()
    );
};</pre>
        </div>
        <div class="Example">
            <h6>Example: Using a JSON parser</h6>
            <p>In the following example, the source is a JSON encoded log message. The syslog parser is disabled, so that <MadCap:variable name="General.abbrev"></MadCap:variable> does not parse the message: <b class="Code">flags(no-parse)</b>. The json-parser inserts "<span class="Code">.json.</span>" prefix before all extracted name-value pairs. The destination is a file, that uses the <span class="Code">format-json</span> template function. Every name-value pair that begins with a dot ("<span class="Code">.</span>") character will be written to the file (<span class="Code">dot-nv-pairs</span>). The log line connects the source, the destination and the parser.</p><pre>source s_json {
    network(port(21514) flags(no-parse));
};

destination d_json {
    file("/tmp/test.json"
        template("$(format-json --scope dot-nv-pairs)\n"));
};

parser p_json {
    json-parser (prefix(".json."));
};

log {
    source(s_json);
    parser(p_json);
    destination(d_json);
};</pre>
            <p>You can also define the parser inline in the log path.</p><pre>source s_json {
    network(port(21514) flags(no-parse));
};

destination d_json {
    file("/tmp/test.json"
        template("$(format-json --scope dot-nv-pairs)\n"));
};

log {
    source(s_json);
    parser {
        json-parser (prefix(".json."));
    };
    destination(d_json);
};</pre>
        </div>
    </body>
</html>