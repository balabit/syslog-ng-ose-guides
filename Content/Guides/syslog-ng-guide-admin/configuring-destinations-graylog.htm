<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="configuring-destinations-graylog">
        <h1 name="configuring-destinations-graylog">Sending logs to Graylog</h1>
        <MadCap:keyword term="destination drivers:['graylog2()']">
        </MadCap:keyword>
		<div>
        <h6>graylog2(): Sending logs to Graylog</h6>
        <p>You can use the <span class="Code">graylog2()</span> destination and a Graylog Extended Log Format (GELF) template to send syslog messages to <a href="http://docs.graylog.org">Graylog</a>.</p>
        <p>You can forward simple name-value pairs where the name starts with a dot or underscore. If names of your name-value pairs include dots other than the first character, you should use JSON formatting directly instead of the GELF template and send logs to a raw TCP port in Graylog, which can then extract fields from nested JSON.<MadCap:conditionaltext MadCap:conditions="General.OSE"> Version 3.21 and later also supports TLS-encrypted connection to the Graylog server.</MadCap:conditionaltext></p>
		</div>
        <div>
            <h6>Declaration:</h6><pre>graylog2();</pre>
        </div>
        <div class="Example">
            <h6 name="example-destination-graylog"><a name="example-destination-graylog"></a>Example: Using the graylog2() driver</h6>
            <p>You can send syslog messages to Graylog using the <b class="Code">graylog2()</b> destination. The <span class="Code">graylog2()</span> destination uses the GELF template, the native data format of Graylog.</p>
            <ol>
                <li>
                    <p>On the Graylog side, configure a GELF TCP input. For more information, see the relevant <a href="http://docs.graylog.org">Graylog</a> documentation.</p>
                </li>
                <li>
                    <p>On the syslog-ng side, configure the name or IP address of the host running Graylog.</p><pre>destination d_graylog {
  graylog2(
    host("172.16.146.142")
    transport(tcp)
  );
};</pre>
                    <p>If you parsed your messages using syslog-ng, the template also forwards any name-value pairs where the name starts with a dot or underscore.</p>
                </li>
            </ol>
			<div class="Note">
				<p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> 
				If there is a dot in a field name other than the first character, syslog-ng creates nested JSON while formatting the message. Nested JSON is not automatically parsed in GELF messages.</p>
            </div>
        </div>
        <div>
            <h6>Sending nested JSON to Graylog</h6>
            <p>While sending nested JSON inside GELF is possible, it is not convenient. If you use parsing and normalization in syslog-ng and dot notation in field names, use pure JSON instead of GELF to forward your messages.</p>
            <ol>
                <li>
                    <p>On the Graylog side, create a new raw TCP input.</p>
                </li>
                <li>
                    <p>Still in Graylog, once the raw TCP input is ready, add a JSON extractor to it.</p>
                </li>
                <li>
                    <p>On the syslog-ng side, use a network destination combined with a template utilizing format-json as shown in the example below:</p><pre>destination d_jsontcp {
  network(
    "172.16.146.142"
    port("5555")
    transport(tcp)
    template("$(format-json --scope all-nv-pairs)\n")
  );
};</pre>
                </li>
            </ol>
        </div>
    </body>
</html>