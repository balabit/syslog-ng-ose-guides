<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body name="filters-comparing">
        <h1 name="filters-comparing">Comparing macro values in filters</h1>
        <MadCap:keyword term="filters:['comparing values']">
        </MadCap:keyword>
        <MadCap:keyword term="ge">
        </MadCap:keyword>
        <MadCap:keyword term="gt">
        </MadCap:keyword>
        <MadCap:keyword term="eq">
        </MadCap:keyword>
        <MadCap:keyword term="ne">
        </MadCap:keyword>
        <MadCap:keyword term="le">
        </MadCap:keyword>
        <MadCap:keyword term="lt">
        </MadCap:keyword>
        <MadCap:keyword term="string comparison">
        </MadCap:keyword>
        <MadCap:keyword term="value comparison">
        </MadCap:keyword>
        <MadCap:keyword term="comparing values">
        </MadCap:keyword>
        <MadCap:keyword term="filters:['comparing values']">
        </MadCap:keyword>
        <p>Starting with <MadCap:variable name="General.abbrev"></MadCap:variable> version <MadCap:conditionaltext MadCap:conditions="General.OSE">3.2</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="General.PE">4 F1</MadCap:conditionaltext>, it is also possible to compare macro values and templates as numerical and string values. String comparison is alphabetical: it determines if a string is alphabetically greater or equal to another string. Use the following syntax to compare macro values or templates. For details on macros and templates, see <MadCap:xref href="customizing-message-format.htm"><span style="color: #04aada;" class="mcFormatColor">Customizing message format using macros and templates</span></MadCap:xref>.</p><pre>filter &lt;filter-id&gt;
        {"&lt;macro-or-template&gt;" operator "&lt;value-or-macro-or-template&gt;"};</pre>
	<h6 name="string-and-numerical-comparison"><a name="string-and-numerical-comparison"></a>String and numerical comparison</h6>
	<p><MadCap:variable name="General.product" /> versions prior to 4.0 used separate operators for string comparisons (for example, <span class="Code">eq</span>). In version 4.0 and onwards, mathematical symbols can be used as operators (==, !=, >=), and <MadCap:variable name="General.product" /> automatically determines how to compare the arguments based on their type.</p>
	<ul>
		<li><p>If both sides of the comparison are strings, the comparison is string.</p></li>
		<li><p>If at least one of the argument is numeric, the comparison is numeric.</p></li>
		<li><p>Numbers not enclosed by quotation marks, are recognized as numeric.</p></li>
		<li><p>It is possible to explicitly type-cast an argument as numeric.</p></li>
	</ul>
	<p><b>Examples:</b></p>
	<ul>
		<li><p><pre>if ("${.apache.httpversion}" == 1.0)</pre></p>
		<p>The right side of the argument is 1.0 (a floating point literal), so the comparison is numeric.</p>
		</li>
		<li><p><pre>if (double("${.apache.httpversion}") == "1.0")</pre></p>
		<p>The left side of the argument is explicitly type cast into double, the right side is a string (note the use of quotation marks), so the comparison is numeric.</p>
		</li>
		<li><p><pre>if ("${.apache.request}" == "/wp-admin/login.php")</pre></p>
		<p>The left side of the argument is not type-cast, so it remains a string. The right side of the argument is also a string, so the comparison is string.</p>
		</li>
	</ul>
<div class="Note">
	<p class="Hyphenation"><span class="AllNoteStyles">NOTE: </span>The old string operators can still be used for the sake of backwards compatibility, but it is advised and easier to use the numeric operators for strings as well.</p>
 </div>
 <p></p>
        <div class="Example">
            <h6 name="example-comparison"><a name="example-comparison"></a>Example: Comparing macro values in filters</h6>
            <p>The following expression selects log messages containing a PID (that is, <span class="Code">${PID}</span> macro is not empty):</p><pre>filter f_pid {"${PID}" !=""};</pre>
            <p>The following expression selects log messages that do not contain a PID. Also, it uses a template as the left argument of the operator and compares the values as strings:</p><pre>filter f_pid {"${HOST}${PID}" eq "${HOST}"};</pre>
            <p>The following example selects messages with priority level higher than 5.</p><pre>filter f_level {"${LEVEL_NUM}" &gt; "5"};</pre>
        </div>
        <p>Note that:</p>
        <ul>
            <li>
                <p>The macro or template must be enclosed in double-quotes.</p>
            </li>
            <li>
                <p>The <span class="Code">$</span> character must be used before macros.</p>
            </li>
            <li>
                <p>Using comparator operators can be equivalent to using filter functions, but is somewhat slower. For example, using <b class="Code">"${HOST}" eq "myhost"</b> is equivalent to using <b class="Code">host("myhost" type(string))</b>.</p>
            </li>
            <li>
                <p>You can use any macro in the expression, including user-defined macros from parsers and results of pattern database classifications.</p>
            </li>
            <li>
                <p>The results of filter functions are boolean values, so they cannot be compared to other values.</p>
            </li>
            <li>
                <p>You can use boolean operators to combine comparison expressions.</p>
            </li>
        </ul>
        <p>The following operators are available:</p>
        <MadCap:snippetBlock src="../shared/chunk/table-comparison-operators-routing-filters.htm">
        </MadCap:snippetBlock>
    </body>
</html>