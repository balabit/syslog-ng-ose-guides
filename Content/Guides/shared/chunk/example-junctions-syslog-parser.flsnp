<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body>
        <div class="Example">
            <h6>Example: Using junctions</h6>
            <p>For example, suppose that you have a single network source that receives log messages from different devices, and some devices send messages that are not RFC-compliant (some routers are notorious for that). To solve this problem in earlier versions of <MadCap:variable name="General.abbrev"></MadCap:variable>, you had to create two different network sources using different IP addresses or ports: one that received the RFC-compliant messages, and one that received the improperly formatted messages (for example, using the <b class="Code">flags(no-parse)</b> option). Using junctions this becomes much more simple: you can use a single network source to receive every message, then use a junction and two channels. The first channel processes the RFC-compliant messages, the second everything else. At the end, every message is stored in a single file. The filters used in the example can be <span class="Code">host()</span> filters (if you have a list of the IP addresses of the devices sending non-compliant messages), but that depends on your environment.</p><pre>log {
    source {
        syslog(
            ip(10.1.2.3)
            transport("tcp")
            flags(no-parse)
        );
    };
    junction {
        channel {
            filter(f_compliant_hosts);
            parser {
                syslog-parser();
            };
        };
        channel {
            filter(f_noncompliant_hosts);
        };
    };
    destination {
        file("/var/log/messages");
    };
};</pre>
            <p>Since every channel receives every message that reaches the junction, use the <b class="Code">flags(final)</b> option in the channels to avoid the unnecessary processing the messages multiple times:</p><pre>log {
    source {
        syslog(
            ip(10.1.2.3)
            transport("tcp")
            flags(no-parse)
        );
    };
    junction {
        channel {
            filter(f_compliant_hosts);
            parser {
                syslog-parser();
            };
            flags(final);
        };
        channel {
            filter(f_noncompliant_hosts);
            flags(final);
        };
    };
    destination {
        file("/var/log/messages");
    };
};</pre>
			<div class="Note">
            <p><span class="AllNoteStyles">NOTE:</span> <MadCap:variable name="General.abbrev" /> has several parsers that you can use to parse non-compliant messages. You can even <a href="../../syslog-ng-guide-admin/python-parser.htm">write a custom syslog-ng parser in Python</a>. For details, see <MadCap:xref href="../../syslog-ng-guide-admin/chapter-parsers.htm"><span style="color: #04aada;" class="mcFormatColor">parser: Parse and segment structured messages</span></MadCap:xref>.</p>
			</div>
        </div>
    </body>
</html>