<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="" />
    </head>
    <body>
		<div>
        <h6>multi-line-prefix()</h6>
        <MadCap:keyword term="multi-line-prefix()">
        </MadCap:keyword>
        <MadCap:keyword term="processing multi-line messages">
        </MadCap:keyword>
        <MadCap:keyword term="multi-line messages">
        </MadCap:keyword>
        <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Type:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">regular expression starting with the ^ character</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyB-Column1-Body1">Default:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyA-Column1-Body1">empty string</td>
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
        <p><i style="font-style: normal;">Description:</i> Use the <span class="Code">multi-line-prefix()</span> option to process multi-line messages, that is, log messages that contain newline characters (for example, Tomcat logs). Specify a string or regular expression that matches the beginning of the log messages (always start with the <b class="Code">^</b> character). Use as simple regular expressions as possible, because complex regular expressions can severely reduce the rate of processing multi-line messages. If the <span class="Code">multi-line-prefix()</span> option is set, <MadCap:variable name="General.abbrev"></MadCap:variable> ignores newline characters from the source until a line matches the regular expression again, and treats the lines between the matching lines as a single message. See also the <span class="Code">multi-line-garbage()</span> option.</p>
        <MadCap:snippetBlock src="../../shared/wnt/tip-multi-line-output.htm">
        </MadCap:snippetBlock>
        <div class="Example">
            <h6>Example: Processing Tomcat logs</h6>
            <MadCap:keyword term="multi-line messages">
            </MadCap:keyword>
            <MadCap:keyword term="Tomcat logs">
            </MadCap:keyword>
            <p>The log messages of the Apache Tomcat server are a typical example for multi-line log messages. The messages start with the date and time of the query in the <span class="Code">YYYY.MM.DD HH:MM:SS</span> format, as you can see in the following example.</p><pre>2010.06.09. 12:07:39 org.apache.catalina.startup.Catalina start
SEVERE: Catalina.start:
LifecycleException:  service.getName(): "Catalina";  Protocol handler start failed: java.net.BindException: Address already in use null:8080
       at org.apache.catalina.connector.Connector.start(Connector.java:1138)
       at org.apache.catalina.core.StandardService.start(StandardService.java:531)
       at org.apache.catalina.core.StandardServer.start(StandardServer.java:710)
       at org.apache.catalina.startup.Catalina.start(Catalina.java:583)
       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
       at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
       at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
       at java.lang.reflect.Method.invoke(Method.java:597)
       at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)
       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
       at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
       at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
       at java.lang.reflect.Method.invoke(Method.java:597)
       at org.apache.commons.daemon.support.DaemonLoader.start(DaemonLoader.java:177)
2010.06.09. 12:07:39 org.apache.catalina.startup.Catalina start
INFO: Server startup in 1206 ms
2010.06.09. 12:45:08 org.apache.coyote.http11.Http11Protocol pause
INFO: Pausing Coyote HTTP/1.1 on http-8080
2010.06.09. 12:45:09 org.apache.catalina.core.StandardService stop
INFO: Stopping service Catalina</pre>
            <p>To process these messages, specify a regular expression matching the timestamp of the messages in the <span class="Code">multi-line-prefix()</span> option. Such an expression is the following:</p><pre>source s_file{file("/var/log/tomcat6/catalina.2010-06-09.log" follow-freq(0) <MadCap:conditionaltext MadCap:conditions="General.OSE">multi-line-mode(regexp) </MadCap:conditionaltext>multi-line-prefix("[0-9]{4}\.[0-9]{2}\.[0-9]{2}\.") flags(no-parse));};
};</pre>
            <p>Note that <span class="Code">flags(no-parse)</span> is needed to prevent <MadCap:variable name="General.abbrev"></MadCap:variable> trying to interpret the date in the message.</p>
        </div>
		</div>
    </body>
</html>