<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1><a name="relayexamples"></a>Example relay use cases</h1>
        <p>The relay collects log messages through the network and after processing, but without writing them on the disk for storage, forwards them to one or more remote destinations. </p>
        <p>You can use a relay for many different use cases as described in the examples below.</p>
		<div>
        <h6>UDP-only source devices</h6>
        <p>Most network devices send log messages over UDP. However, UDP does not guarantee that all packets are delivered, which makes UDP unreliable.</p>
        <p>To ensure at least a best effort level of reliability, <MadCap:variable name="CommonVariables.CompanyNameShort" /> recommends that you deploy a relay on the network, close to the source devices. With the  most reliable hops between the source and the relay, you can minimize the risk of losing UDP packets. Once the packet arrives at the relay, <a href="https://syslog-ng.com/blog/upgrading-from-syslog-ng-open-source-to-premium-edition/"><MadCap:variable name="General.abbrev" MadCap:conditions="General.OSE" /><MadCap:variable name="General.PE" MadCap:conditions="General.PE" /></a> ensures that the messages are delivered to the central server in a reliable manner, based on TCP/TLS<MadCap:conditionalText MadCap:conditions="General.PE"> and Advanced Log Transfer Protocol (ALTP)</MadCap:conditionalText>.</p>
		</div>
		<div>
        <h6>Too many source devices</h6>
        <p>Depending on the hardware and configuration, an average syslog-ng instance can usually handle the following number of concurrent connections:</p>
        <ul>
            <li>If the maximum message rate is lower than 200,000 messages per second:</li>
            <ul>
                <li>
                    <p>maximum ca. 5,000 TCP connections</p>
                </li>
                <li>
                    <p>maximum ca. 1,000 TLS connections</p>
                </li>
                <li MadCap:conditions="General.PE">
                    <p>maximum ca. 1,000 ALTP connections</p>
                </li>
            </ul>
            <li>
                <p>If the message rate is higher than 200,000 messages per second, contact <MadCap:variable name="CommonVariables.CompanyNameShort" />.</p>
            </li>
        </ul>
        <p>If you have more source devices, you must deploy a relay machine at least per 5,000 sources and batch up all the logs into a single TCP connection that connects the relay to the server. If TLS<MadCap:conditionalText MadCap:conditions="General.PE"> or ALTP</MadCap:conditionalText> is used, deploy relays  per 1,000 source devices.</p>
		</div>
		<div>
        <h6>Collecting logs from remote sites (especially over public WAN)</h6>
        <p>If you need to collect log messages from geographically remote sites or over public WAN, <MadCap:variable name="CommonVariables.CompanyNameShort" /> recommends that you  install  at least a relay node per each remote site. The relay can be the last outgoing hop for all the messages of the remote site, which has several benefits:</p>
        <ul>
            <li>
                <p><b>Maintenance</b>: You only need to change the configuration of the relay if you want to re-route the logs of some or all sources of the remote site. Also you do not need to change each source’s configuration one by one.<br /></p>
            </li>
            <li>
                <p><b>Security</b>: If you trust your internal network, it is not necessary to hold encrypted connections within the LAN of the remote site as the messages can get to the relay without encryption. Messages must be sent in an encrypted way over the public WAN, and it is enough to hold only a single TCP/TLS connection between the sites, that is, between the remote relay and the central server. This eliminates the wasting of resources as holding several TLS connections directly from the clients is more costly than holding a single connection from the relay.</p>
            </li>
            <li>
                <p><b>Reliability</b>: You can set up a main disk-buffer on the relay. The main disk-buffer is only responsible for buffering all the logs of the remote site if the central <MadCap:variable name="General.abbrev" MadCap:conditions="General.OSE" /><MadCap:variable name="General.PE" MadCap:conditions="General.PE" /> server is temporarily unavailable. It is easier to maintain this single main disk-buffer instead of setting disk-buffers on individual client machines.</p>
            </li>
        </ul>
		</div>
		<div>
        <h6>Separation, distribution, and balancing of message processing tasks</h6>
        <p>Most Linux applications have their own human readable, but difficult to handle, log messages. Without parsing and normalization it is difficult to alert and report on these log messages. Many syslog-ng users use the message parsing tools of syslog-ng to normalize their different log messages. Just like normalization, filtering can also be resource-heavy, depending on what the filtering is based on. In this case, it might be inefficient to perform all the message processing tasks on the server as it can result in decreased overall performance. </p>
        <p>It is a typical setup to deploy relays in front of the central server operating as a receiver front-end. Most resource-heavy tasks, for example, parsing, filtering, and so on, are performed on this receiver layer. As all resource-heavy tasks are performed on the relay, the central server behind it only needs to get the messages from the relay and write them into the final text-based <MadCap:conditionalText MadCap:conditions="General.PE">or tamper-proof (logstore)</MadCap:conditionalText> format. Since you can run several relays, you can balance the resource-heavy tasks between more relays, and a single server behind the relays can still be fast enough to write all the messages on the disk.</p>
        <p>Acting as a relay also depends on the functionality. A relay does not have to be a dedicated relay machine at all. For log collection, it can be one of the clients with a relay configuration. Note that in a robust log collection infrastructure, the relays have their own purpose, and <MadCap:variable name="CommonVariables.CompanyNameShort" /> recommends running dedicated relay machines.</p>
        <p>You can run several parallel relays to ensure horizontal redundancy. For example, if each of the relays has the same configuration, when one relay goes down another relay can take over the processing. Distribution of the logs can be done by the built-in client-side failover functionality and also by a general load balancer. The load balancer is also used to serve N+1 redundant relay deployments. In this case, switching from one relay to another relay is done when there is  an outage but also for real load balancing purposes.</p>
		</div>
		<div>
        <h6>What syslog-ng relays are not good for</h6>
        <p>The purpose of the relay is to buffer the logs for short term, for example, a few minutes or a few hours long outages (depending on the log volume). It is not designed to buffer logs generated by the sources during a very long server or connection outage, for example, up to a few days long.</p>
        <p>If you expect extended outages, <MadCap:variable name="CommonVariables.CompanyNameShort" /> recommends  that you deploy servers instead of relays. There are many deployments where long term storage and archiving are performed on the central syslog-ng server, but relays also do short-term log storage. <MadCap:conditionalText MadCap:conditions="General.PE">From the <MadCap:variable name="General.PE" MadCap:conditions="General.PE" /> point of view, these are servers, and thus need separate server licenses.</MadCap:conditionalText></p>
		</div>
    </body>
</html>