<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body>
		<div>
        <h6>flags()</h6>
        <MadCap:keyword term="flags()">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['assume-utf8']">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['empty-lines']">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['expect-hostnames']">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['guess-timezone']">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['kernel']">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['no-hostname']">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['no-multi-line']">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['no-parse']">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['sanitize-utf8']">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['store-legacy-msghdr']">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['store-raw-message']">
        </MadCap:keyword>
        <MadCap:keyword term="flags:['validate-utf8']">
        </MadCap:keyword>
        <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Type:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">assume-utf8, empty-lines, expect-hostname, kernel, no-hostname, no-multi-line, no-parse, sanitize-utf8, store-legacy-msghdr, store-raw-message, syslog-protocol, validate-utf8</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyB-Column1-Body1">Default:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyA-Column1-Body1">empty set</td>
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
        <p><i style="font-style: normal;">Description:</i> Specifies the log parsing options of the source.</p>
        <ul>
            <li>
                <p><i>assume-utf8</i>: The <span class="Code">assume-utf8</span> flag assumes that the incoming messages are UTF-8 encoded, but does not verify the encoding. If you explicitly want to validate the UTF-8 encoding of the incoming message, use the <b class="Code">validate-utf8</b> flag.</p>
            </li>
            <li>
                <p><i>empty-lines</i>: Use the <b class="Code">empty-lines</b> flag to keep the empty lines of the messages. By default, <MadCap:variable name="General.abbrev"></MadCap:variable> removes empty lines automatically.</p>
            </li>
            <li>
                <p><i>expect-hostname</i>: If the <span class="Code">expect-hostname</span> flag is enabled, <MadCap:variable name="General.abbrev"></MadCap:variable> will assume that the log message contains a hostname and parse the message accordingly. This is the default behavior for TCP sources. Note that pipe sources use the <span class="Code">no-hostname</span> flag by default.</p>
            </li>
            <li>
                <p><i>guess-timezone</i>: Attempt to guess the timezone of the message if this information is not available in the message. Works when the incoming message stream is close to real time, and the timezone information is missing from the timestamp.</p>
            </li>
            <li>
                <p><i>kernel</i>: The <span class="Code">kernel</span> flag makes the source default to the <span class="Code">LOG_KERN | LOG_NOTICE</span> priority if not specified otherwise.</p>
            </li>
            <li>
                <p><i>no-header</i>: The <span class="Code">no-header</span>  flag triggers <MadCap:variable name="General.abbrev" /> to parse only the <span class="Code">PRI</span> field of incoming messages, and put the rest of the message contents into <span class="Code">$MSG</span>.</p>
                <p>Its functionality is similar to that of the <span class="Code">no-parse</span>  flag, except the  <span class="Code">no-header</span> flag does not skip the <span class="Code">PRI</span> field.</p>
                <div class="Note">
                    <p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> Essentially, the <span class="Code">no-header</span> flag signals <MadCap:variable name="General.abbrev" /> that the <span class="Code">syslog</span>  header is not present (or does not adhere to the conventions / RFCs), so the entire message (except from the <span class="Code">PRI</span> field) is put into <span class="Code">$MSG</span>.</p>
                </div>
                <div class="Example">
                    <h6>Example: using the no-header flag with the syslog-parser() parser</h6>
                    <p>The following example illustrates using the <span class="Code">no-header</span> flag with the <span class="Code">syslog-parser()</span> parser:</p><pre>parser p_syslog {
  syslog-parser(
    flags(no-header)
  );
};</pre>
                </div>
            </li>
            <li>
                <p><i>no-hostname</i>: Enable the <span class="Code">no-hostname</span> flag if the log message does not include the hostname of the sender host. That way <MadCap:variable name="General.abbrev"></MadCap:variable> assumes that the first part of the message header is ${PROGRAM} instead of ${HOST}. For example:</p><pre>source s_dell {
    network(
        port(2000)
        flags(no-hostname)
    );
};</pre>
            </li>
            <li>
                <p><i>no-multi-line</i>: The <span class="Code">no-multi-line</span> flag disables line-breaking in the messages: the entire message is converted to a single line. Note that this happens only if the underlying transport method actually supports multi-line messages. Currently the <span class="Code">file()</span> and <span class="Code">pipe()</span> drivers support multi-line messages.</p>
            </li>
            <li>
                <p><i>no-parse</i>: By default, <MadCap:variable name="General.abbrev"></MadCap:variable> parses incoming messages as syslog messages. The <span class="Code">no-parse</span> flag completely disables syslog message parsing and processes the complete line as the message part of a syslog message. The <MadCap:variable name="General.abbrev"></MadCap:variable> application will generate a new syslog header (timestamp, host, and so on) automatically and put the entire incoming message into the MESSAGE part of the syslog message (available using the <span class="Code">${MESSAGE}</span> macro). This flag is useful for parsing messages not complying to the syslog format.</p>
                <MadCap:snippetBlock src="para-flags-no-parse.flsnp">
                </MadCap:snippetBlock>
            </li>
            <li>
                <p><i>dont-store-legacy-msghdr</i>: By default, syslog-ng stores the original incoming header of the log message. This is useful if the original format of a non-syslog-compliant message must be retained (syslog-ng automatically corrects minor header errors, for example, adds a whitespace before <span class="Code">msg</span> in the following message: <span class="Code">Jan 22 10:06:11 host program:msg</span>). If you do not want to store the original header of the message, enable the <b class="Code">dont-store-legacy-msghdr</b> flag.</p>
            </li>
            <li>
                <p><i>sanitize-utf8</i>: When using the <span class="Code">sanitize-utf8</span> flag, <MadCap:variable name="General.abbrev"></MadCap:variable> converts non-UTF-8 input to an escaped form, which is valid UTF-8.</p>
            </li>
            <li>
                <p><i>store-raw-message</i>: Save the original message as received from the client in the <span class="Code">${RAWMSG}</span> macro. You can forward this raw message in its original form to another syslog-ng node using the <a href="../../syslog-ng-guide-admin/destination-syslog-ng.htm">syslog-ng() destination</a>, or to a SIEM system, ensuring that the SIEM can process it. Available only in <MadCap:conditionaltext MadCap:conditions="General.PE">7.0.9</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="General.OSE">3.16</MadCap:conditionaltext> and later.</p>
            </li>
            <li>
                <p><i>syslog-protocol</i>: The <span class="Code">syslog-protocol</span> flag specifies that incoming messages are expected to be formatted according to the new IETF syslog protocol standard (RFC5424), but without the frame header. Note that this flag is not needed for the <span class="Code">syslog</span> driver, which handles only messages that have a frame header.</p>
            </li>
            <li>
                <p><i>validate-utf8</i>: The <span class="Code">validate-utf8</span> flag enables encoding-verification for messages formatted according to the new IETF syslog standard (for details, see <MadCap:xref href="../../syslog-ng-guide-admin/concepts-message-ietfsyslog.htm"><span style="color: #04aada;" class="mcFormatColor">IETF-syslog messages</span></MadCap:xref>). If the <glossterm linkend="glossary-bom" role="underline">BOM</glossterm><footnote><MadCap:snippetBlock src="para-bom-definition.flsnp"></MadCap:snippetBlock></footnote> character is missing, but the message is otherwise UTF-8 compliant, syslog-ng automatically adds the BOM character to the message.</p>
            </li>
        </ul>
		</div>
    </body>
</html>