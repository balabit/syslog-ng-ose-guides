<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="option-value-pairs">
        <h1 name="option-value-pairs">value-pairs()</h1>
        <MadCap:keyword term="value-pairs()">
        </MadCap:keyword>
        <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Type:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">parameter list of the <span class="Code">value-pairs()</span> option</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyB-Column1-Body1">Default:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyA-Column1-Body1"><pre>empty string</pre>
                    </td>
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
        <p><i style="font-style: normal;">Description:</i> The <span class="Code">value-pairs()</span> option allows you to select specific information about a message easily using predefined macro groups. The selected information is represented as name-value pairs and can be used formatted to JSON format, or directly used in a <span class="Code">mongodb()</span> destination.</p>
        <div class="Example">
            <h6>Example: Using the value-pairs() option</h6>
            <MadCap:keyword term="value-pairs()">
            </MadCap:keyword>
            <p>The following example selects every available information about the log message, except for the date-related macros (<span class="Code">R_*</span> and <span class="Code">S_*</span>), selects the <span class="Code">.SDATA.meta.sequenceId</span> macro, and defines a new value-pair called <span class="Code">MSGHDR</span> that contains the program name and PID of the application that sent the log message.</p><pre>value-pairs(
    scope(nv_pairs core syslog all_macros selected_macros everything)
    exclude("R_*")
    exclude("S_*")
    key(".SDATA.meta.sequenceId")
    pair("MSGHDR" "$PROGRAM[$PID]: ")
)</pre>
            <p>The following example selects the same information as the previous example, but converts it into JSON format.</p><pre>$(format-json --scope nv_pairs,core,syslog,all_macros,selected_macros,everything \
    --exclude R_* --exclude S_* --key .SDATA.meta.sequenceId \
    --pair MSGHDR="$PROGRAM[$PID]: ")</pre>
        </div>
        <div class="Note">
            <p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> Every macro is included in the selection only once, but redundant information may appear if multiple macros include the same information (for example, including several date-related macros in the selection).</p>
        </div>
        <p>The <span class="Code">value-pairs()</span> option has the following parameters. The parameters are evaluated in the following order:</p>
        <ol>
            <li>
                <p><a href="../../syslog-ng-guide-admin/concepts-value-pairs.htm"><span class="Code">scope()</span></a>
                </p>
            </li>
            <li>
                <p><a href="../../syslog-ng-guide-admin/concepts-value-pairs.htm"><span class="Code">exclude()</span></a>
                </p>
            </li>
            <li>
                <p><a href="../../syslog-ng-guide-admin/concepts-value-pairs.htm"><span class="Code">key()</span></a>
                </p>
            </li>
            <li>
                <p><a href="../../syslog-ng-guide-admin/concepts-value-pairs.htm"><span class="Code">pair()</span></a>
                </p>
            </li>
        </ol>
        <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" name="value-pairs-exclude" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1" colspan="2">
                        <MadCap:keyword term="exclude()">
                        </MadCap:keyword><i style="font-style: normal;">exclude()</i>
                    </td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Type:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">Space-separated list of macros to remove from the selection created using the <span class="Code">scope()</span> option.</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Default:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">empty string</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyA-Column1-Body1" colspan="2">
                        <p><i style="font-style: normal;">Description:</i> This option removes the specified macros from the selection. Use it to remove unneeded macros selected using the <span class="Code">scope()</span> parameter.</p>
                        <p>For example, the following example removes the SDATA macros from the selection.</p><pre>value-pairs(
    scope(rfc5424 selected_macros)
    exclude(".SDATA*")
)</pre>
                        <p>The name of the macro to remove can include wildcards <span class="Code">(*, ?)</span>. Regular expressions are not supported.</p>
                    </td>
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
        <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" name="value-pairs-key" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1" colspan="2"><i style="font-style: normal;">key()</i>
                        <MadCap:keyword term="key()">
                        </MadCap:keyword>
                    </td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Type:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">Space-separated list of macros to be included in selection</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Default:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">empty string</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyA-Column1-Body1" colspan="2">
                        <p><i style="font-style: normal;">Description:</i> This option selects the specified macros. The selected macros will be included as <span class="Code">MACRONAME = MACROVALUE</span>, that is using <span class="Code">key("HOST")</span> will result in <span class="Code">HOST = $HOST</span>. You can use wildcards <span class="Code">(*, ?)</span> to select multiple macros. For example:</p><pre>value-pairs(
    scope(rfc3164)
    key("HOST")
)</pre><pre>value-pairs(
    scope(rfc3164)
    key("HOST", "PROGRAM")
)</pre>
                    </td>
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
        <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" name="value-pairs-pair" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1"><i style="font-style: normal;">omit-empty-values()</i>
                        <MadCap:keyword term="omit-empty-values()">
                        </MadCap:keyword>
                    </td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">
                        <p>&#160;</p>
                    </td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Type:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">flag</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Default:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">N/A</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1" colspan="2">
                        <p><i style="font-style: normal;">Description:</i> If this option is specified, <MadCap:variable name="General.abbrev"></MadCap:variable> does not include value-pairs with empty values in the output. For example: <span class="Code">$(format-json --scope none --omit-empty-values)</span> or</p><pre>value-pairs(
    scope(rfc3164 selected-macros)
    omit-empty-values()
)</pre>
                        <p>Available in <MadCap:variable name="General.abbrev"></MadCap:variable> version <MadCap:conditionaltext MadCap:conditions="General.PE">7.0.14</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="General.OSE">3.21</MadCap:conditionaltext> and later.</p>
                        <p class="TableHyphen">&#160;</p>
                    </td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
        <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" name="value-pairs-pair" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1" colspan="2"><i style="font-style: normal;">pair()</i>
                        <MadCap:keyword term="pair()">
                        </MadCap:keyword>
                    </td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Type:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">name value pairs in <span class="Code">"&lt;NAME&gt;" "&lt;VALUE&gt;"</span> format</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Default:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">empty string</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyA-Column1-Body1" colspan="2">
                        <p><i style="font-style: normal;">Description:</i> This option defines a new name-value pair to be included in the message. The value part can include macros, templates, and template functions as well. For example:</p><pre>value-pairs(
    scope(rfc3164)
    pair("TIME" "$HOUR:$MIN")
    pair("MSGHDR" "$PROGRAM[$PID]: ")
)</pre>
                    </td>
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
        <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" name="value-pairs-rekey" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1" colspan="2"><i style="font-style: normal;">rekey()</i>
                        <MadCap:keyword term="rekey()">
                        </MadCap:keyword>
                    </td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Type:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">&lt;pattern-to-select-names&gt;, &lt;list of transformations&gt;</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Default:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">empty string</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyA-Column1-Body1" colspan="2">
                        <p><i style="font-style: normal;">Description:</i> This option allows you to manipulate and modify the name of the value-pairs. You can define transformations, which are are applied to the selected name-value pairs. The first parameter of the <span class="Code">rekey()</span> option is a glob pattern that selects the name-value pairs to modify. If you omit the pattern, the transformations are applied to every key of the scope. For details on globs, see <MadCap:xref href="../../syslog-ng-guide-admin/reference-regexp-types.htm#reference-regexp-glob"><span style="color: #04aada;" class="mcFormatColor">glob</span></MadCap:xref>.</p>
                        <p>If you want to modify the names of several message fields, see also <MadCap:xref href="../../syslog-ng-guide-admin/parser-map-value-pairs.htm"><span style="color: #04aada;" class="mcFormatColor">map-value-pairs: Rename value-pairs to normalize logs</span></MadCap:xref>.</p>
                        <ul>
                            <li>
                                <p>If <span class="Code">rekey()</span> is used within a <span class="Code">key()</span> option, the name-value pairs specified in the glob of the <span class="Code">key()</span> option are transformed.</p>
                            </li>
                            <li>
                                <p>If <span class="Code">rekey()</span> is used outside the <span class="Code">key()</span> option, every name-value pair of the <span class="Code">scope()</span> is transformed.</p>
                            </li>
                        </ul>
                        <p>The following transformations are available:</p>
                        <ul oldrole="variablelist">
                            <li oldrole="varlistentry"><span class="Code">add-prefix("&lt;my-prefix&gt;")</span>
                                <MadCap:keyword term="add-prefix()">
                                </MadCap:keyword>
                                <p>Adds the specified prefix to every name. For example, <span class="Code">rekey( add-prefix("my-prefix."))</span></p>
                            </li>
                            <li oldrole="varlistentry"><span class="Code">replace-prefix("&lt;prefix-to-replace&gt;", "&lt;new-prefix&gt;")</span>
                                <MadCap:keyword term="replace-prefix()">
                                </MadCap:keyword>
                                <p>Replaces a substring at the beginning of the key with another string. Only prefixes can be replaced. For example, <span class="Code">replace-prefix(".class", ".patterndb")</span> changes the beginning tag <span class="Code">.class</span> to <span class="Code">.patterndb</span></p>
                                <p MadCap:conditions="General.OSE">This option was called <span class="Code">replace()</span> in <MadCap:variable name="General.abbrev"></MadCap:variable> version 3.4.</p>
                            </li>
                            <li oldrole="varlistentry"><span class="Code">lower</span>
                                <MadCap:keyword term="lower">
                                </MadCap:keyword>
                                <p>Converts all keys to lowercase. Only characters included in the US ASCII are supported.</p>
                            </li>
                            <li oldrole="varlistentry"><span class="Code">shift("&lt;number&gt;")</span>
                                <MadCap:keyword term="shift()">
                                </MadCap:keyword>
                                <p>Cuts the specified number of characters from the beginning of the name.</p>
                            </li>
                            <li oldrole="varlistentry"><span class="Code">shift-levels("&lt;number&gt;")</span>
                                <MadCap:keyword term="shift-levels()">
                                </MadCap:keyword>
                                <p>Similar to --shift, but instead of cutting characters, it cuts dot-delimited "levels" in the name (including the initial dot). For example, <span class="Code">--shift-levels 2</span> deletes the prefix up to the second dot in the name of the key: <span class="Code">.iptables.SRC</span> becomes <span class="Code">SRC</span></p>
                            </li>
                            <li oldrole="varlistentry"><span class="Code">upper</span>
                                <MadCap:keyword term="upper">
                                </MadCap:keyword>
                                <p>Converts all keys to uppercase. Only characters included in the US ASCII are supported.</p>
                            </li>
                        </ul>
                        <div class="Example">
                            <h6 name="example-value-pairs-rekey"><a name="example-value-pairs-rekey"></a>Example: Using the rekey() option</h6>
                            <p>The following sample selects every value-pair that begins with <span class="Code">.cee.</span>, deletes this prefix by cutting 4 characters from the names, and adds a new prefix (<span class="Code">events.</span>).</p><pre>value-pairs(
    key(".cee.*"
        rekey(
            shift(4)
            add-prefix("events.")
        )
    )
)</pre>
                            <p>The <span class="Code">rekey()</span> option can be used with the <span class="Code">format-json</span> template-function as well, using the following syntax:</p><pre>$(format-json --rekey .cee.* --add-prefix events.)</pre>
                        </div>
                    </td>
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
        <table cellspacing="0" class="TableStyle-RuledTableWithHeading_DoNotEdit" colsep="0" name="value-pairs-scope" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1" colspan="2"><i style="font-style: normal;">scope()</i>
                        <MadCap:keyword term="scope()">
                        </MadCap:keyword>
                    </td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Type:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">space-separated list of macro groups to include in selection</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyE-Column1-Body1">Default:</td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyD-Column1-Body1">empty string</td>
                </tr>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-BodyA-Column1-Body1" colspan="2">
                        <p><i style="font-style: normal;">Description:</i> This option selects predefined groups of macros. The following groups are available:</p>
                        <ul>
                            <li>
                                <p><i>nv-pairs</i>: Every soft macro (name-value pair) associated with the message, except the ones that start with a dot (.) character. Macros starting with a dot character are generated within <MadCap:variable name="General.abbrev"></MadCap:variable> and are not originally part of the message, therefore are not included in this group.</p>
                            </li>
                            <li>
                                <p><i>dot-nv-pairs</i>: Every soft macro (name-value pair) associated with the message which starts with a dot (.) character. For example, <span class="Code">.classifier.rule_id</span> and <span class="Code">.sdata.*</span>. Macros starting with a dot character are generated within <MadCap:variable name="General.abbrev"></MadCap:variable> and are not originally part of the message.</p>
                            </li>
                            <li>
                                <p><i>all-nv-pairs</i>: Include every soft macro (name-value pair). Equivalent to using both <span class="Code">nv-pairs</span> and <span class="Code">dot-nv-pairs</span>.</p>
                            </li>
                            <li>
                                <p><i>rfc3164</i>: The macros that correspond to the RFC3164 (legacy or BSD-syslog) message format: <span class="Code">$FACILITY</span>, <span class="Code">$PRIORITY</span>, <span class="Code">$HOST</span>, <span class="Code">$PROGRAM</span>, <span class="Code">$PID</span>, <span class="Code">$MESSAGE</span>, and <span class="Code">$DATE</span>.</p>
                            </li>
                            <li>
                                <p><i>rfc5424</i>: The macros that correspond to the RFC5424 (IETF-syslog) message format: <span class="Code">$FACILITY</span>, <span class="Code">$PRIORITY</span>, <span class="Code">$HOST</span>, <span class="Code">$PROGRAM</span>, <span class="Code">$PID</span>, <span class="Code">$MESSAGE</span>, <span class="Code">$MSGID</span>, <span class="Code">$R_DATE</span>, and the metadata from the structured-data (SDATA) part of RFC5424-formatted messages, that is, every macro that starts with <span class="Code">.SDATA.</span>.</p>
                                <p>The <span class="Code">rfc5424</span> group also has the following alias: <span class="Code">syslog-proto</span>. Note that the value of <span class="Code">$R_DATE</span> will be listed under the <span class="Code">DATE</span> key.</p>
                                <p>The <span class="Code">rfc5424</span> group does not contain any metadata about the message, only information that was present in the original message. To include the most commonly used metadata (for example, the <span class="Code">$SOURCEIP</span> macro), use the <span class="Code">selected-macros</span> group instead.</p>
                            </li>
                            <li>
                                <p><i>all-macros</i>: Include every hard macro. This group is mainly useful for debugging, as it contains redundant information (for example, the date-related macros include the date-related information several times in various formats).</p>
                            </li>
                            <li>
                                <p><i>selected-macros</i>: Include the macros of the <span class="Code">rfc3164</span> groups, and the most commonly used metadata about the log message: the <span class="Code">$TAGS</span>, <span class="Code">$SOURCEIP</span>, and <span class="Code">$SEQNUM</span> macros.</p>
                            </li>
                            <li>
                                <p><i>sdata</i>: The metadata from the structured-data (SDATA) part of RFC5424-formatted messages, that is, every macro that starts with <span class="Code">.SDATA.</span></p>
                            </li>
                            <li>
                                <p><i>everything</i>: Include every hard and soft macros. This group is mainly useful for debugging, as it contains redundant information (for example, the date-related macros include the date-related information several times in various formats).</p>
                            </li>
                            <li>
                                <p><i>none</i>: Reset previously added scopes, for example, to delete automatically-added name-value pairs. The following example deletes every value-pair from the scope, and adds only the ones starting with iptables: <span class="Code">$(format-welf --scope none .iptables.*)</span></p>
                            </li>
                        </ul>
                        <p>For example:</p><pre>value-pairs(
    scope(rfc3164 selected-macros)
)</pre>
                    </td>
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
    </body>
</html>