<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
 [
 <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<chapter xml:id="chapter-configuration-file" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>The &abbrev; configuration file</title>
    <section xml:id="config-file">
        <title>Location of the syslog-ng configuration file</title>
        <para>The syslog-ng application is configured by editing the <filename>syslog-ng.conf</filename> file. Use any regular text editor application to modify the file.<phrase condition="ose"> The location of the configuration file depends on how you installed &abbrev;. Native packages of a platform (like the ones downloaded from Linux repositories) typically place the configuration file under the <filename>/etc/syslog-ng/</filename> directory.</phrase><phrase condition="pe"> The <filename>syslog-ng.conf</filename> and <filename>license.txt</filename> files are located under the <filename>/opt/syslog-ng/etc/</filename> directory.</phrase></para>
    </section>
    <section xml:id="configuration-syntax">
        <title>The configuration syntax in detail</title>
        <indexterm significance="preferred">
            <primary>syslog-ng.conf</primary>
        </indexterm>
        <para>Every syslog-ng configuration file must begin with a line containing the version information of syslog-ng. For syslog-ng version &version;, this line looks like:</para>
        <synopsis>@version: &techversion;</synopsis>
        <para>Versioning the configuration file was introduced in syslog-ng 3.0. If the configuration file does not contain the version information, syslog-ng assumes that the file is for syslog-ng version 2.x. In this case it interprets the configuration and sends warnings about the parts of the configuration that should be updated. Version 3.0 and later will correctly operate with configuration files of version 2.x, but the default values of certain parameters have changed since 3.0.</para>
        <example>
            <title>A simple configuration file</title>
            <para>The following is a very simple configuration file for syslog-ng: it collects the internal messages of syslog-ng and the messages from <filename>/dev/log</filename> into the <filename>/var/log/messages_syslog-ng.log</filename> file.</para>
            <synopsis>@version: &techversion;

source s_local { unix-dgram("/dev/log"); internal(); };

destination d_file { file("/var/log/messages_syslog-ng.log"); };

log { source(s_local); destination(d_file); };</synopsis>
        </example>
        <para>As a syslog-ng user described on a <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://www.gossamer-threads.com/lists/gentoo/user/209108">mailing list</link>:</para>
        <blockquote>
            <attribution>Alan McKinnon</attribution>
            <para><emphasis>The syslog-ng's config file format was written by programmers for programmers to be understood by programmers. That may not have been the stated intent, but it is how things turned out. The syntax is exactly that of C, all the way down to braces and statement terminators.</emphasis></para>
        </blockquote>
        <xi:include href="../../common/chunk/global-objects-syntax.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <tip>
            <para>Before activating a new configuration, check that your configuration file is syntactically correct using the <command>syslog-ng --syntax-only</command> command.</para>
            <para>To activate the configuration, reload the configuration of syslog-ng using the <command>/etc/init.d/syslog-ng reload</command> command.</para>
        </tip>
    </section>
    <section xml:id="configuration-syntax-notes">
        <title>Notes about the configuration syntax</title>
        <para>When you are editing the syslog-ng configuration file, note the following points:</para>
        <itemizedlist>
            <listitem>
                <para>The configuration file can contain a maximum of 6665 source / destination / log elements.</para>
            </listitem>
            <listitem>
                <para>When writing the names of options and parameters (or other reserved words), the hyphen (<userinput>-</userinput>) and underscore (<userinput>_</userinput>) characters are equivalent, for example <userinput>max-connections(10)</userinput> and <userinput>max_connections(10)</userinput> are both correct.</para>
            </listitem>
            <listitem>
                <para>Numbers can be prefixed with <userinput>+</userinput> or <userinput>-</userinput> to indicate positive or negative values. Numbers beginning with zero (<userinput>0</userinput>) or <userinput>0x</userinput> are treated as octal or hexadecimal numbers, respectively.</para>
                <para>Starting with &abbrev; version <phrase condition="ose">3.5</phrase>, you can use suffixes for kilo-, mega-, and gigabytes. Use the Kb, Mb, or Gb suffixes for the base-10 version, and Kib, Mib, or Gib for the base-2 version. That is, 2MB means 2000000, while 2MiB means 2097152. For example, to set the <parameter>log-fifo-size()</parameter> option to 2000000 bytes, use <parameter>log-fifo-size(2Mb)</parameter>.</para>
            </listitem>
            <listitem>
                <para>You can use commas (<userinput>,</userinput>) to separate options or other parameters for readability; syslog-ng completely ignores them. The following declarations are equivalent:</para>
                <synopsis>source s_demo_stream {
        unix-stream("&lt;path-to-socket&gt;" max-connections(10) group(log)); };
source s_demo_stream {
        unix-stream("&lt;path-to-socket&gt;", max-connections(10), group(log)); };</synopsis>
            </listitem>
            <listitem>
                <para>When enclosing object IDs (for example the name of a destination) between double-quotes (<userinput>"mydestination"</userinput>), the ID can include whitespace as well, for example:</para>
                <synopsis>source "s demo stream" {
        unix-stream("&lt;path-to-socket&gt;" max-connections(10) group(log)); };</synopsis>
            </listitem>
            <listitem>
                <para>For notes on using regular expressions, see <xref linkend="regular-expressions"/>.</para>
            </listitem>
        </itemizedlist>
    </section>
    <section xml:id="inline-objects" condition="ose">
        <title>Defining configuration objects inline</title>
        <para>Starting with &abbrev; <phrase condition="ose">3.4</phrase>, you can define configuration objects inline, where they are actually used, without having to define them in a separate placement. This is useful if you need an object only once, for example, a filter or a rewrite rule. Every object can be defined inline: sources, destinations, filters, parsers, rewrite rules, and so on.</para>
        <para>To define an object inline, use braces instead of parentheses. That is, instead of <parameter>&lt;object-type&gt; (&lt;object-id&gt;);</parameter>, you use <parameter>&lt;object-type&gt; {&lt;object-definition&gt;};</parameter></para>
        <example>
            <title>Using inline definitions</title>
            <para>The following two configuration examples are equivalent. The first one uses traditional statements, while the second uses inline definitions.</para>
            <synopsis>source s_local {
    system();
    internal();
};
destination d_local {
    file("/var/log/messages");
};
log {
    source(s_local);
    destination(d_local);
};</synopsis>
            <synopsis>log {
    source {
        system();
        internal();
    };
    destination {
        file("/var/log/messages");
    };
};</synopsis>
        </example>
    </section>
    <xi:include href="embedded-objects.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <section xml:id="config-global-variables">
        <title>Global and environmental variables</title>
        <indexterm>
            <primary>syslog-ng.conf</primary>
            <secondary>global variables</secondary>
        </indexterm>
        <indexterm>
            <primary>syslog-ng.conf</primary>
            <secondary>environmental variables</secondary>
        </indexterm>
        <indexterm>
            <primary>environmental variables</primary>
        </indexterm>
        <indexterm>
            <primary>global variables</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>@define</primary>
        </indexterm>
        <para>Starting with &abbrev; version <phrase condition="ose">3.2</phrase><phrase condition="pe">4 F1</phrase>, it is possible to define global variables in the configuration file. Global variables are actually <userinput>name-value</userinput> pairs; when syslog-ng processes the configuration file during startup, it automatically replaces <userinput>`name`</userinput> with <userinput>value</userinput>. To define a global variable, use the following syntax:</para>
        <synopsis>@define name "value"</synopsis>
        <para>The value can be any string, but special characters must be escaped.<!-- FIXME add a link to the part about escaping -->To use the variable, insert the name of the variable enclosed between backticks (<userinput>`</userinput>, similarly to using variables in Linux or UNIX shells) anywhere in the configuration file.</para>
        <para>The value of the global variable can be also specified using the following methods:</para>
        <itemizedlist>
            <listitem>
                <para>Without any quotes, as long as the value does not contain any spaces or special characters. In other word, it contains only the following characters: <userinput>a-zA-Z0-9_.</userinput>.</para>
            </listitem>
            <listitem>
                <para>Between apostrophes, in case the value does not contain apostrophes.</para>
            </listitem>
            <listitem>
                <para>Between double quotes, in which case special characters must be escaped using backslashes (<userinput>\</userinput>).</para>
            </listitem>
        </itemizedlist>
        <tip>
            <para>The environmental variables of the host are automatically imported and can be used as global variables.</para>
        </tip>
        <example xml:id="example-global-variables">
            <title>Using global variables</title>
            <para>For example, if an application is creating multiple log files in a directory, you can store the path in a global variable, and use it in your source definitions.</para>
            <synopsis>@define mypath "/opt/myapp/logs"
        source s_myapp_1 { file("`mypath`/access.log" follow-freq(1)); };
        source s_myapp_2 { file("`mypath`/error.log" follow-freq(1)); };
        source s_myapp_3 { file("`mypath`/debug.log" follow-freq(1)); };</synopsis>
            <para>The &abbrev; application will interpret this as:</para>
            <synopsis>@define mypath "/opt/myapp/logs"
        source s_myapp_1 { file("/opt/myapp/logs/access.log" follow-freq(1)); };
        source s_myapp_2 { file("/opt/myapp/logs/error.log" follow-freq(1)); };
        source s_myapp_3 { file("/opt/myapp/logs/debug.log" follow-freq(1)); };</synopsis>
        </example>
<!-- FIXME add an example that uses escaping -->
    </section>
    <section xml:id="modules">
        <title>Modules in &abbrev;</title>
        <indexterm>
            <primary>modules</primary>
        </indexterm>
        <indexterm>
            <primary>plugins</primary>
            <see>modules</see>
        </indexterm>
        <para>The &abbrev; application is modular, to increase its flexibility and also to simplify the development of additional modules. Most of the functionality of &abbrev; is in separate modules. That way it becomes also possible to finetune the resource requirements of &abbrev;, for example, by loading only the modules that are actually used in the configuration, or simply omitting modules that are not used but require large amount of memory.</para>
        <para>Each module contains one or more plugins, which add some functionality to &abbrev;, for example, a destination or a source driver.</para>
        <itemizedlist>
            <listitem>
                <para>To display the list of available modules, execute the <command>syslog-ng --version</command> command.</para>
            </listitem>
            <listitem>
                <para>To the description of the available modules, execute the <command>syslog-ng --module-registry</command> command.</para>
            </listitem>
            <listitem>
                <para>To customize which modules are loaded automatically when &abbrev; is started, use the <command>--default-modules</command> command-line option of &abbrev;.</para>
            </listitem>
            <listitem>
                <para>To request loading a module from the &abbrev; configuration file, see <xref linkend="modules-loading"/>.</para>
            </listitem>
        </itemizedlist>
        <para>For details on the command-line parameters of &abbrev; mentioned in the previous list, see the &abbrev; man page at <xref linkend="syslog-ng.8"/>.</para>
        <section xml:id="modules-loading">
            <title>Loading modules</title>
            <indexterm>
                <primary>modules</primary>
            </indexterm>
            <indexterm>
                <primary>plugins</primary>
                <see>modules</see>
            </indexterm>
            <indexterm type="parameter">
                <primary>@module</primary>
            </indexterm>
            <para>The &product; application loads every available module during startup<phrase condition="pe">, except the <parameter>snmp()</parameter> module. For details on using the <parameter>snmp()</parameter> destination driver, see <xref linkend="configuring-destinations-snmp"/></phrase>.</para>
            <para>To load a module that is not loaded automatically, include the following statement in the &abbrev; configuration file:</para>
            <synopsis>@module &lt;module-name&gt;</synopsis>
            <para>Note the following points about the <parameter>@module</parameter> statement:</para>
            <itemizedlist>
                <listitem>
                    <para>The <parameter>@module</parameter> statement is a top-level statement, that is, it cannot be nested into any other statement. Usually it is used immediately after the <parameter>@version</parameter> statement.</para>
                </listitem>
                <listitem>
                    <para>Every <parameter>@module</parameter> statement loads a single module: loading multiple modules requires a separate <parameter>@module</parameter> statement for every module.</para>
                </listitem>
                <listitem>
                    <para>In the configuration file, the <parameter>@module</parameter> statement of a module must be earlier than the module is used.</para>
                </listitem>
            </itemizedlist>
            <note>
                <para>To disable loading every module automatically, set the <parameter>autoload-compiled-modules</parameter> global variable to 0 in your configuration file:</para>
                <indexterm type="parameter">
                    <primary>autoload-compiled-modules</primary>
                </indexterm>
                <synopsis>@define autoload-compiled-modules 0</synopsis>
                <para>Note that in this case, you have to explicitly load the modules you want to use.</para>
            </note>
        </section>
    </section>
    <section xml:id="large-configs">
        <title>Managing complex syslog-ng configurations</title>
        <para>The following sections describe some methods that can be useful to simplify the management of large-scale syslog-ng installations.</para>
        <section xml:id="including-config-files">
            <title>Including configuration files</title>
            <indexterm>
                <primary>syslog-ng.conf</primary>
                <secondary>includes</secondary>
            </indexterm>
            <indexterm>
                <primary>configuration file</primary>
                <secondary>including other files</secondary>
            </indexterm>
            <indexterm type="parameter">
                <primary>@include</primary>
            </indexterm>
            <para>The syslog-ng application supports including external files in its configuration file, so parts of its configuration can be managed separately. To include the contents of a file in the syslog-ng configuration, use the following syntax:</para>
            <synopsis>@include "&lt;filename&gt;"</synopsis>
            <para>This imports the entire file into the configuration of &abbrev;, at the location of the include statement. The &lt;filename&gt; can be one of the following:</para>
            <itemizedlist>
                <listitem>
                    <para>A filename, optionally with full path. The filename (not the path) can include UNIX-style wildcard characters (<userinput>*</userinput>, <userinput>?</userinput>). When using wildcard characters, &abbrev; will include every matching file. For details on using wildcard characters, see <xref linkend="reference-regexp-glob"/>.</para>
                </listitem>
                <listitem>
                    <para>A directory. When including a directory, &abbrev; will try to include every file from the directory, except files beginning with a ~ (tilde) or a . (dot) character. Including a directory is not recursive. The files are included in alphabetic order, first files beginning with uppercase characters, then files beginning with lowercase characters. For example, if the directory contains the <userinput>a.conf, B. conf, c.conf, D.conf</userinput> files, they will be included in the following order: <userinput>B.conf, D. conf, a.conf, c.conf</userinput>.</para>
                </listitem>
            </itemizedlist>
            <para>When including configuration files, consider the following points:</para>
            <itemizedlist>
                <listitem>
                    <para>Defining an object twice is not allowed, unless you use the <parameter>@define allow-config-dups 1</parameter> definition in the configuration file. If an object is defined twice (for example the original syslog-ng configuration file and the file imported into this configuration file both define the same option, source, or other object), then the object that is defined later in the configuration file will be effective. For example, if you set a global option at the beginning of the configuration file, and later include a file that defines the same option with a different value, then the option defined in the imported file will be used.</para>
                </listitem>
                <listitem>
                    <para>Files can be embedded into each other: the included files can contain include statements as well, up to a maximum depth of 15 levels.</para>
                </listitem>
                <listitem>
                    <para>You cannot include complete configuration files into each other, only configuration snippets can be included. This means that the included file cannot have a <parameter>@version</parameter> statement.</para>
                </listitem>
                <listitem>
                    <para>Include statements can only be used at top level of the configuration file. For example, the following is correct:</para>
                    <synopsis>@version: &techversion;
@include "example.conf"</synopsis>
                    <para>But the following is not:</para>
                    <synopsis>source s_example {
    @include "example.conf"
};</synopsis>
                </listitem>
            </itemizedlist>
            <warning>
                <para>The syslog-ng application will not start if it cannot find a file that is to be included in its configuration. Always double-check the filenames, paths, and access rights when including configuration files, and use the <command>--syntax-only</command> command-line option to check your configuration.</para>
            </warning>
        </section>
        <section xml:id="config-blocks">
            <title>Reusing configuration blocks</title>
            <indexterm>
                <primary>configuration snippets</primary>
            </indexterm>
            <indexterm>
                <primary>reusing snippets</primary>
            </indexterm>
            <indexterm type="parameter">
                <primary>block</primary>
            </indexterm>
            <para>To create a reusable configuration snippet and reuse parts of a configuration file, you have to define the block (for example, a source) once, and reference it later. (Such reusable blocks are sometimes called a Source Configuration Library, or SCL.) Any syslog-ng object can be a block. Use the following syntax to define a block:</para>
            <synopsis>block type name() {&lt;contents of the block&gt;};</synopsis>
            <para>Type must be one of the following: <parameter>destination</parameter>, <parameter>filter</parameter>, <parameter>log</parameter>, <parameter>parser</parameter>, <parameter>rewrite</parameter>, <parameter>root</parameter>, <parameter>source</parameter>. The <parameter>root</parameter> blocks can be used in the "root" context of the configuration file, that is, outside any other statements.</para>
            <para>Blocks may be nested into each other, so for example a block can be built from other blocks. Blocks are somewhat similar to C++ templates.</para>
            <para>The type and name combination of each block must be unique, that is, two blocks can have the same name if their type is different.</para>
            <para>To use a block in your configuration file, you have to do two things:</para>
            <itemizedlist>
                <listitem>
                    <para>Include the file defining the block in the <filename>syslog-ng.conf</filename> file &mdash; or a file already included into <filename>syslog-ng.conf</filename>. Version <phrase condition="ose">3.7</phrase> and newer automatically includes the <filename>*.conf</filename> files from the <filename>&lt;directory-where-syslog-ng-is-installed&gt;/scl/*/</filename> directories.</para>
                </listitem>
                <listitem>
                    <para>Reference the name of the block in your configuration file. This will insert the block into your configuration. For example, to use a block called <userinput>myblock</userinput>, include the following line in your configuration:</para>
                    <synopsis>myblock()</synopsis>
                    <para>Blocks may have parameters, but even if they do not, the reference must include opening and closing parentheses like in the previous example.</para>
                </listitem>
            </itemizedlist>
            <para>The contents of the block will be inserted into the configuration when &abbrev; is started or reloaded.</para>
            <example xml:id="example-configuration-block">
                <title>Reusing configuration blocks</title>
                <para>Suppose you are running an application on your hosts that logs into the <filename>/opt/var/myapplication.log</filename> file. Create a file (for example, <filename>myblocks.conf</filename>) that stores a source describing this file and how it should be read:</para>
                <synopsis>block source myappsource() {
        file("/opt/var/myapplication.log" follow-freq(1) default-facility(syslog)); };</synopsis>
                <para>Include this file in your main syslog-ng configuration file, reference the block, and use it in a logpath:</para>
                <synopsis>@version: &techversion;
@include "&lt;correct/path&gt;/myblocks.conf"
source s_myappsource { myappsource(); };
...
log { source(s_myappsource); destination(...); };</synopsis>
            </example>
            <para>To define a block that defines more than one object, use <parameter>root</parameter> as the type of the block, and reference the block from the main part of the &abbrev; configuration file.</para>
            <example xml:id="example-configuration-block-root">
                <title>Defining blocks with multiple elements</title>
                <indexterm type="parameter">
                    <primary>root</primary>
                </indexterm>
                <indexterm>
                    <primary>root</primary>
                </indexterm>
                <para>The following example defines a source, a destination, and a log path to connect them.</para>
                <synopsis>block root mylogs() {
        source s_file { file("/var/log/mylogs.log" follow-freq(1)); };
        destination d_local { file("/var/log/messages"); };
        log { source(s_file); destination(d_local); };
};</synopsis>
            </example>
            <tip>
                <para>Since the block is inserted into the &abbrev; configuration when &abbrev; is started, the block can be generated dynamically using an external script if needed. This is useful when you are running &abbrev; on different hosts and you want to keep the main configuration identical.</para>
                <para>If you want to reuse more than a single configuration object, for example, a logpath and the definitions of its sources and destinations, use the include feature to reuse the entire snippet. For details, see <xref linkend="including-config-files"/>.</para>
            </tip>
            <section xml:id="config-blocks-arguments">
                <title>Passing arguments to configuration blocks</title>
                <indexterm type="parameter">
                    <primary>block arguments</primary>
                </indexterm>
                <para>Configuration blocks can receive arguments as well. The parameters the block can receive must be specified when the block is defined, using the following syntax:</para>
                <synopsis>block type block_name(argument1(&lt;default-value-of-the-argument&gt;) argument2(&lt;default-value-of-the-argument&gt;) argument3())</synopsis>
                <para>If an argument does not have a default value, use empty parentheses after the name of the argument. To refer the value of the argument in the block, use the name of the argument between backticks (for example, <userinput>`argument1`</userinput>).</para>
                <example>
                    <title>Passing arguments to blocks</title>
                    <para>The following sample defines a file source block, which can receive the name of the file as a parameter. If no parameter is set, it reads messages from the <filename>/var/log/messages</filename> file.</para>
                    <synopsis>block source s_logfile (filename("messages")) {
  file("/var/log/`filename`" );
};

source s_example {
  s_logfile(filename("logfile.log"));
};</synopsis>
                </example>
                <example condition="ose">
                    <title>Using arguments in blocks</title>
                    <para>The following example is the code of the <link linkend="configuring-source-pacct"><parameter>pacct()</parameter> source driver</link>, which is actually a block that can optionally receive two arguments.</para>
                    <synopsis>block source pacct(file("/var/log/account/pacct") follow-freq(1)) {
@module pacctformat
        file("`file`" follow-freq(`follow-freq`) format("pacct") tags(".pacct"));
};</synopsis>
                </example>
            </section>
        </section>
        <xi:include href="generating-configuration-blocks.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </section>
</chapter>
