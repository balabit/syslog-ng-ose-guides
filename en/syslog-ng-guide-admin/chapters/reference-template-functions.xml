<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="reference-template-functions" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Template functions of &abbrev;</title>
    <para>The following template functions are available in &abbrev;.</para>
    <simplesect xml:id="template-function-echo">
        <title>echo</title>
        <indexterm type="parameter">
            <primary>echo</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(echo argument)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the value of its argument. Using <userinput>$(echo ${HOST})</userinput> is equivalent to <parameter>${HOST}</parameter>.</para>
    </simplesect>
    <simplesect xml:id="template-function-env">
        <title>env</title>
        <indexterm type="parameter">
            <primary>env</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(env &lt;environment-variable&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the value of the specified environment variable. Available in &abbrev; <phrase condition="ose">3.5</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-format-cim">
        <title>format-cim</title>
        <indexterm type="parameter">
            <primary>format-cim</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(format-cim)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Formats the message into <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://docs.splunk.com/Documentation/CIM/latest/User/Overview">Splunk Common Information Model (CIM) format</link>. Applications that can receive messages in CIM format include Kibana, logstash, and Splunk. Applications that can be configured to log into CIM format include nflog and the Suricata IDS engine.</para>
        <synopsis>destination d_cim {
  network("192.168.1.1" template("$(format-cim)\n"));
};</synopsis>
        <para>You can find the exact source of this template function in the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://github.com/balabit/syslog-ng/blob/master/scl/cim/template.conf">&abbrev; GitHub repository</link>.</para>
    </simplesect>
    <simplesect xml:id="template-function-format-json">
        <title>format-json</title>
        <indexterm type="parameter">
            <primary>format-json</primary>
        </indexterm>
        <indexterm>
            <primary>JSON</primary>
        </indexterm>
        <indexterm>
            <primary>JavaScript Object Notation</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(format-json parameters)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> The <parameter>format-json</parameter> template function receives value-pairs as parameters and converts them into JavaScript Object Notation (JSON) format. Including the template function in a message template allows you to store selected information about a log message (that is, its content, macros, or other metadata) in JSON format.</para>
        <para>For details on selecting value-pairs in &abbrev; and for possibilities to specify which information to convert to JSON format, see <xref linkend="concepts-value-pairs"/>. Note that the syntax of <parameter>format-json</parameter> is different from the syntax of <parameter>value-pairs()</parameter>: <parameter>format-json</parameter> uses a syntax similar to command lines.</para>
        <xi:include href="../../common/wnt/note-typehinting.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <example>
            <title>Using the format-json template function</title>
            <para>The following example selects every available information about the log message, except for the date-related macros (<userinput>R_*</userinput> and <userinput>S_*</userinput>), selects the <userinput>.SDATA.meta.sequenceId</userinput> macro, and defines a new value-pair called <userinput>MSGHDR</userinput> that contains the program name and PID of the application that sent the log message (since you will use the template-function in a template, you must escape the double-quotes).</para>
            <synopsis>$(format-json --scope syslog,all_macros,selected_macros \
  --exclude R_* --exclude S_* --key .SDATA.meta.sequenceId \
  --pair MSGHDR=\"$PROGRAM[$PID]: \")</synopsis>
            <para>The following example shows how to use this template function to store log messages in JSON format:</para>
            <synopsis>destination d_json {
  file("/var/log/messages.json" template("$(format-json --scope selected_macros --scope nv_pairs)\n"));
};</synopsis>
        </example>
        <note>
            <para>In case of syslog-ng macros starting with a dot (for example "<userinput>.SDATA.meta.sequenceID</userinput>") an empty key name is added at the top level of the JSON structure. You can work around this by adding <userinput>--shift 1</userinput> as a parameter to the template function. For example in case of "<userinput>.SDATA.meta.sequenceID</userinput>", an empty key name is added at the top level of the JSON structure:</para>
            <synopsis>{"":
    {"SDATA" :
        {"meta" :
            {"sequenceID": "123"}
        }
    }
}</synopsis>
        </note>
    </simplesect>
    <simplesect xml:id="template-function-format-welf">
        <title>format-welf</title>
        <indexterm>
            <primary>format-welf()</primary>
        </indexterm>
        <indexterm>
            <primary>WELF</primary>
        </indexterm>
        <indexterm>
            <primary>WebTrends Enhanced Log file Format</primary>
        </indexterm>
        <para>This template function converts value-pairs into the WebTrends Enhanced Log file Format (WELF). The WELF format is a comma-separated list of <userinput>name=value</userinput> elements. Note that the order of the elements is random. If the value contains whitespace, it is enclosed in double-quotes, for example, <userinput>name="value"</userinput>. For details on the WELF format, see <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://www3.trustwave.com/support/kb/article.aspx?id=10899">https://www3.trustwave.com/support/kb/article.aspx?id=10899</link>.</para>
        <para>To select which value-pairs to convert, use the command-line syntax of the <parameter>value-pairs()</parameter> option. For details on selecting value-pairs, see <xref linkend="options-value-pairs"/>.</para>
        <example>
            <title>Using the <parameter>format-welf()</parameter> template function</title>
            <para>The following example selects every available information about the log message, except for the date-related macros (<userinput>R_*</userinput> and <userinput>S_*</userinput>), selects the <userinput>.SDATA.meta.sequenceId</userinput> macro, and defines a new value-pair called <userinput>MSGHDR</userinput> that contains the program name and PID of the application that sent the log message (since you will use the template-function in a template, you must escape the double-quotes).</para>
            <synopsis>$(format-welf --scope syslog,all_macros,selected_macros \
  --exclude R_* --exclude S_* --key .SDATA.meta.sequenceId \
  --pair MSGHDR=\"$PROGRAM[$PID]: \")</synopsis>
            <para>The following example shows how to use this template function to store log messages in WELF format:</para>
            <synopsis>destination d_welf {
  file("/var/log/messages.welf" template("$(format_welf --scope selected_macros --scope nv_pairs)\n"));
};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-geoip" condition="ose">
        <title>geoip</title>
        <indexterm type="parameter">
            <primary>geoip</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(geoip &lt;IP-address&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This template function returns the 2-letter country code of any IPv4 address or host. Currently only the 2-letter codes are supported, and only from the default database. For example, <userinput>$(geoip $HOST)</userinput></para>
        <note condition="ose">
            <para>This template function is available only if &abbrev; has been compiled with the <parameter>--enable-geoip</parameter> compiling option.</para>
        </note>
        <para>To retrieve additional GeoIP information, see <xref linkend="geoip-parser"/>.</para>
    </simplesect>
    <simplesect xml:id="template-function-graphite">
        <title>graphite-output</title>
        <indexterm type="parameter">
            <primary>graphite-output</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(graphite-output parameters)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Available in &abbrev; <phrase condition="ose">3.6</phrase> and later<phrase condition="ose"> (Originally appeared in the &abbrev; incubator for syslog-ng 3.5)</phrase>. This template function converts value-pairs from the incoming message to the Graphite plain text protocol format. It is ideal to use with the messages generated by the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://github.com/balabit/syslog-ng-incubator/tree/master/modules/monitor-source/">monitor-source plugin</link> (currently available in the syslog-ng incubator project).</para>
        <para>For details on selecting value-pairs in &abbrev; and for possibilities to specify which information to convert to Graphite plain text protocol format, see <xref linkend="concepts-value-pairs"/>. Note that the syntax of <parameter>graphite-output</parameter> is different from the syntax of <parameter>value-pairs()</parameter>: <parameter>graphite-output</parameter> uses a the command-line syntax used in the <link linkend="template-function-format-json">format-json template function</link>.</para>
        <example>
            <title>Using the graphite-output template function</title>
            <para>The following configuration example shows, how to send value-pairs with names starting with "<userinput>vmstat.</userinput>" to Graphite running on <userinput>localhost</userinput>, port <userinput>2003</userinput>:</para>
            <synopsis>destination d_graphite {
  network( host("localhost") port(2003) template("$(graphite-output --key vmstat.*)"));
};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-grep">
        <title>grep</title>
        <indexterm type="parameter">
            <primary>grep</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(grep condition value-to-select)</synopsis><!-- FIXME make this more specific --></para>
        <para><emphasis role="bold">Description:</emphasis> The <parameter>grep</parameter> template function is useful when using a pattern database to correlate related log messages. The <parameter>grep</parameter> template function can be used to filter the messages of the same context when the index of the particular message is not known.</para>
        <example>
            <title>Using the grep template function</title>
            <para>The following example selects the message of the context that has a <userinput>username</userinput> name-value pair with the <userinput>root</userinput> value, and returns the value of the <userinput>auth_method</userinput> name-value pair.</para>
            <synopsis>$(grep ("${username}" == "root") ${auth_method})</synopsis>
        </example>
        <para>It is possible to specify multiple name-value pairs as parameters, separated with commas. If multiple messages match the condition of <parameter>grep</parameter>, these will be returned also separated by commas. This can be used for example to collect the e-mail recipients from postfix messages.</para>
<!-- FIXME add an example -->
    </simplesect>
    <simplesect xml:id="template-function-hash">
        <title>hash</title>
        <indexterm type="parameter">
            <primary>tfhash</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>$(hash)</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>$(md5), $(md4)</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>$(sha1), $(sha256), $(sha512)</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>tfhash</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(&lt;method&gt; [opts] $arg1 $arg2 $arg3...)</synopsis></para>
        <para><emphasis role="bold">Options:</emphasis><synopsis>--length N, -l N</synopsis>Truncate the hash to the first N characters.</para>
        <para><emphasis role="bold">Description:</emphasis> Calculates a hash of the string or macro received as argument using the specified hashing method. If you specify multiple arguments, effectively you receive the hash of the first argument salted with the subsequent arguments.</para>
        <para><userinput>&lt;method&gt;</userinput> can be one of md5, md4, sha1, sha256, sha512 and "hash", which is equivalent to md5. Macros are expected as arguments, and they are concatenated without the use of additional characters.</para>
        <para>This template function can be used for anonymizing sensitive parts of the log message (for example username) that were parsed out using PatternDB before storing or forwarding the message. This way, the ability of correlating messages along this value is retained.</para>
        <para>Also, using this template, quasi-unique IDs can be generated for data, using the <parameter>--length</parameter> option. This way, IDs will be shorter than a regular hash, but there is a very small possibility of them not being as unique as a non-truncated hash.</para>
        <note condition="ose">
            <para>These template functions are available only if <phrase condition="ose">&abbrev; has been compiled with the <parameter>--enable-ssl</parameter> compile option and </phrase>the <filename>tfhash</filename> module has been loaded.</para>
            <xi:include href="../../common/chunk/para-load-module.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </note>
        <example xml:id="template-function-hash-example">
            <title>Using the $(hash) template function</title>
            <para>The following example calculates the SHA1 hash of the hostname of the message:</para>
            <synopsis>$(sha1 $HOST)</synopsis>
            <para>The following example calculates the SHA256 hash of the hostname, using the <userinput>salted</userinput> string to salt the result:</para>
            <synopsis>$(sha1 $HOST salted)</synopsis>
            <para>To use shorter hashes, set the <parameter>--length</parameter>:</para>
            <synopsis>$(sha1 --length 6 $HOST)</synopsis>
            <para>To replace the hostname with its hash, use a rewrite rule:</para>
            <synopsis>rewrite r_rewrite_hostname{set("$(sha1 $HOST)", value("HOST"));};</synopsis>
        </example>
        <xi:include href="../../common/chunk/example-rewrite-hash.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </simplesect>
    <simplesect xml:id="template-function-if">
        <title>if</title>
        <indexterm type="parameter">
            <primary>if</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(if (&lt;condition&gt;) &lt;true template&gt; &lt;false template&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the value of the <userinput>&lt;true template&gt;</userinput> parameter if the <userinput>&lt;condition&gt;</userinput> is true. If the <userinput>&lt;condition&gt;</userinput> is false, the value of <userinput>&lt;false template&gt;</userinput> is returned.</para>
        <example>
            <title>Using pattern databases and the if template function</title>
            <para>The following example returns <userinput>violation</userinput> if the <userinput>username</userinput> name-value pair of a message processed with pattern database is <userinput>root</userinput>, and <userinput>system</userinput> otherwise.</para>
            <synopsis>$(if ("${username}" == "root") "violation" "system")</synopsis>
            <para>This can be used to set the class of a message in pattern database rules based on the condition.</para>
            <synopsis>&lt;value name="username"&gt;$(if ("${username}" == "root") "violation" "system")&lt;/value&gt;</synopsis>
            <indexterm>
                <primary>template functions</primary>
                <secondary>embedding</secondary>
            </indexterm>
            <para>Since template functions can be embedded into each other, it is possible to use another template function as the template of the first one. For example, the following expression returns <userinput>root</userinput> if the username is <userinput>root</userinput>, <userinput>admin</userinput> if the username is <userinput>joe</userinput>, and <userinput>normal user</userinput> otherwise.</para>
            <synopsis>&lt;value name="username"&gt;
    $(if ("${username}" == "root")
        "root"
        $(if ("${username}" == "joe") "admin" "normal user")
        "normal user")&lt;/value&gt;</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-indent-multi-line">
        <title>indent-multi-line</title>
        <indexterm type="parameter">
            <primary>indent-multi-line</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(indent-multi-line parameter)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This template function makes it possible to write multi-line log messages into a file. The first line is written like a regular message, subsequent lines are indented with a tab, in compliance with RFC822.</para>
        <example>
            <title>Using the indent-multi-line template function</title>
            <para>The following example writes multi-line messages into a text file.</para>
            <synopsis>destination d_file {
        file ("/var/log/messages"
                template("${ISODATE} ${HOST} $(indent-multi-line ${MESSAGE})\n") );
};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-ipv4-to-int">
        <title>ipv4-to-int</title>
        <indexterm type="parameter">
            <primary>ipv4-to-int</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(ipv4-to-int parameter)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Converts the specified IPv4 address to its numeric representation. The numerical value of an IPv4 address is calculated by treating the IP address as a 4-byte hexadecimal value. For example, the 192.168.1.1 address equals to: 192=C0, 168=A8, 1=01, 1=01, or C0A80101, which is 3232235777 in decimal representation.</para>
        <note>
            <para>This template function is available only if the <filename>convertfuncs</filename> module has been loaded.</para>
            <xi:include href="../../common/chunk/para-load-module.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </note>
    </simplesect>
    <simplesect xml:id="template-function-length" condition="ose">
        <title>length</title>
        <indexterm type="parameter">
            <primary>length</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(length "&lt;macro&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the length of the macro in characters, for example, the length of the message. For example, the following filter selects messages that are shorter than 16 characters:</para>
        <synopsis>f_short {
    match ('-', value ("$(if ($(length "${MSG}") &lt;= 16) "-" "+")"));
};</synopsis>
    </simplesect>
    <simplesect xml:id="template-function-lowercase" condition="ose">
        <title>lowercase</title>
        <indexterm type="parameter">
            <primary>lowercase</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(lowercase "&lt;macro&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the lowercase version of the specified string or macro. For example, the following example uses the lowercase version of the hostname in a directory name:</para>
        <synopsis>destination d_file {
file ("/var/log/${MONTH}/${DAY}/$(lowercase "${HOST}")/messages");
};</synopsis>
        <para>Available in &abbrev; <phrase condition="ose">3.5</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-numerical" condition="ose">
        <title>Numerical operations</title>
        <indexterm type="parameter">
            <primary>numerical operations</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>addition</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>substraction</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>multiplication</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>division</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>modulus</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(&lt;operation&gt; "&lt;value1&gt;" "&lt;value2&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> These template functions allow you to manipulate numbers, that is, to perform addition (+), substraction (-), multiplication (*), division (/), and modulus (%). All of them require two numeric arguments. The result is <userinput>NaN</userinput> (Not-a-Number) if the parameters are not numbers, cannot be parsed, or if a division by zero would occur. For example, to add the value of two macros, use the following template function:</para>
        <synopsis>$(+ "${&lt;MACRO1&gt;}" "${&lt;MACRO2&gt;}");</synopsis>
    </simplesect>
    <simplesect xml:id="template-function-or" condition="ose">
        <title>or</title>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(or &lt;macro1&gt; &lt;macro2&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This template function returns the first non-empty argument.</para>
    </simplesect>
    <simplesect xml:id="template-function-padding" condition="ose">
        <title>padding</title>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis> $(padding &lt;macro&gt; &lt;prepended characters&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This template function extends a string to a specified width with prepending specified characters. The default padding character is ' '(space). For example:</para>
        <example>
            <title>Using the padding template function</title>
            <synopsis>$(padding $MESSAGE 10 X): bar</synopsis>
            <para>This will result in the following string: <userinput>XXXXXXXbar</userinput></para>
            <synopsis>$(padding $MESSAGE 10 foo): bar</synopsis>
            <para>This will result in the following string: <userinput>foofoofbar</userinput></para>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-python" condition="ose">
        <title>python</title>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis> $(python &lt;name-of-the-python-method-to-use&gt; &lt;arguments-of-the-method&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This template function enables you to write a custom template function in Python. You can define a Python block in your &abbrev; configuration file, define one or more Python functions in it, and use the methods as template functions. If you use a Python block, &abbrev; embeds a Python interpreter to process the messages. Note the following points:</para>
        <itemizedlist>
            <listitem>
                <para>Currently only Python 2.7 is supported.</para>
            </listitem>
            <listitem>
                <para>The Python block must be a top-level block in the &abbrev; configuration file.</para>
            </listitem>
            <listitem>
                <para>The Python block can contain multiple Python functions.</para>
            </listitem>
            <listitem>
                <para>The first argument in the definition of the Python function is the actual log message. This is implicitly passed to the function, you do not have to use it in the template function.</para>
            </listitem>
            <listitem>
                <para>The value of the template function is return value of the Python function.</para>
            </listitem>
            <listitem>
                <para>To reference a name-value pair or a macro in the Python function, use the dot-notation. For example, if the first argument in the definition of the function is called <userinput>log-message</userinput>, the value of the HOST macro is <userinput>log-message.HOST</userinput>, and so on.</para>
            </listitem>
        </itemizedlist>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>python {
    def &lt;name-of-the-python-function&gt;(&lt;log-message&gt;, &lt;optional-other-arguments&gt;):
        # &lt;your-python-code&gt;
        return &lt;value-of-the-template-function&gt;
};

template &lt;template-name&gt; {
    template($(python &lt;name-of-the-python-function&gt;));
};</synopsis>
        <example xml:id="example-python-template-functions">
            <title>Writing template functions in Python</title>
            <para>The following example creates a Python template function called <userinput>return-message</userinput> that returns the MESSAGE part of the log message.</para>
            <synopsis>@version: &techversion;
python {
    def return-message(log-message):
        return log-message.MESSAGE
    };
destination d_local {
    file("/tmp/logs.txt" template("[$(python return-message)]\n"));
        };</synopsis>
            <para>The following example creates a Python template function called <userinput>resolve-host</userinput> that receives an IP address as an argument, and attempts to resolve it into a hostname.</para>
            <synopsis>@version: &techversion;
python {
    import socket

    def resolve-host(log-message, hostname):
        try:
            return socket.gethostbyaddr(hostname)[0]
        except (socket.herror, socket.error):
            return 'unknown'
    };
destination d_local {
    file("/tmp/logs.txt" template("${ISODATE} $(python resolve-host(${SOURCE_IP})) ${MESSAGE}\n"));
    };</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-replace-delimiter" condition="ose">
        <title>replace-delimiter</title>
        <indexterm type="parameter">
            <primary>replace-delimiter</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(replace-delimiter "&lt;old-delimiters&gt;" "&lt;new-delimiter&gt;" "&lt;macro&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Replaces the delimiter character with a new one. For example, the following example replaces the tabulators (<userinput>/t</userinput>) in the message with semicolons (<userinput>;</userinput>):</para>
        <synopsis>$(replace-delimiter "\t" ";" "${MESSAGE}")</synopsis>
        <para>Available in &abbrev; <phrase condition="ose">3.5</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-sanitize" condition="ose">
        <title>sanitize</title>
        <indexterm type="parameter">
            <primary>sanitize</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(sanitize &lt;options&gt; "&lt;macro1&gt;" "&lt;macro2&gt; ...")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This file replaces the special characters in macro values, for example, it can replace the slash (/) characters in a filename with the underscore (_) character. If you specify multiple arguments, they will be concatenated using the <userinput>/</userinput> character, so they can be used as separate directory levels when used in filenames.</para>
        <para>The function has the following options:</para>
        <variablelist>
            <varlistentry>
                <term><parameter>--ctrl-chars or -c</parameter>
                </term>
                <listitem>
                    <para>Filter control characters (characters that have an ASCII code of 32 or lower). This option is used by default.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>--invalid-chars &lt;characterlist&gt; or -i &lt;characterlist&gt;</parameter>
                </term>
                <listitem>
                    <para>The list of characters to be replaced with underscores (_). The default list contains the <parameter>/</parameter> character. The following example replaces the \ and @ characters, so for example, fo\o@bar becomes foobar:</para>
                    <synopsis>$(sanitize -i \@ $PROGRAM)</synopsis>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>--no-ctrl-chars or -C</parameter>
                </term>
                <listitem>
                    <para>Do not filter the control characters (characters that have an ASCII code of 32 or lower).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>--replacement &lt;replacement-character&gt; or -r &lt;replacement-character&gt;</parameter>
                </term>
                <listitem>
                    <para>The character used to replace invalid characters. By default, this is the underscore (_). The following example replaces invalid characters with colons instead of underscores, so for example, foo/bar becomes foo;bar:</para>
                    <synopsis>$(sanitize -r ; $PROGRAM)</synopsis>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Using the sanitize template function</title>
            <para>The following example uses the sanitize function on two macros, and the results are used as directory names in a file destination.</para>
            <synopsis>file("/var/log/$(sanitize $HOST $PROGRAM)/messages");</synopsis>
            <para>This is equivalent to <filename>file("/var/log/$HOST/$PROGRAM/messages");</filename>, but any slashes in the values of the $HOST and $PROGRAM macros are replaced with underscores.</para>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-strip" condition="ose">
        <title>strip</title>
        <indexterm type="parameter">
            <primary>strip</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(strip "&lt;macro&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Deletes whitespaces from the beginning and the end of a macro. You can specify multiple macros separated with whitespace in a single template function, for example:</para>
        <synopsis>$(strip "${MSG}" "${PROGRAM}");
};</synopsis>
    </simplesect>
    <simplesect xml:id="template-function-substr" condition="ose">
        <title>substr</title>
        <indexterm type="parameter">
            <primary>substr</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(substr "&lt;argument&gt;" "&lt;offset&gt;" "&lt;length&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This function extracts a substring of a string.</para>
        <variablelist>
            <varlistentry>
                <term><command>argument</command>
                </term>
                <listitem>
                    <para>The string to extract the substring from, for example, <parameter>"${MSG}"</parameter></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command>offset</command>
                </term>
                <listitem>
                    <para>Specifies where the substring begins (in characters). <userinput>0</userinput> means to start from the beginning of the string, <userinput>5</userinput> means to skip the first 5 characters of the string, and so on. Use negative numbers to specify where to start from the end of the string, for example, <userinput>-1</userinput> means the last character, <userinput>-5</userinput> means to start five characters before the end of the string.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command>length</command>
                </term>
                <listitem>
                    <para><emphasis>Optional parameter</emphasis>: The number of characters to extract. If not specified, the substring will be extracted from the offset to the end of the string. Use negative numbers to stop the substring before the end of the string, for example, <userinput>-5</userinput> means the substring ends five characters before the end of the string.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Using the substr template function</title>
            <para>Skip the first 15 characters of the message, and select the rest:</para>
            <synopsis>$(substr "${MSG}" "15");</synopsis>
            <para>Select characters 16-30 of the message:</para>
            <synopsis>$(substr "${MSG}" "15" "30");</synopsis>
            <para>Select the last 15 characters of the message:</para>
            <synopsis>$(substr "${MSG}" "-15");</synopsis>
            <para>A template that converts the message to RFC3164 (BSD-syslog) format and truncates the messages to 1023 characters:</para>
            <synopsis>template t_truncate_messages {
      template("$(substr \"&lt;$PRI&gt;$DATE $HOST $MSGHDR$MSG\" \"0\" \"1023\")\n");
      template-escape(no);
  };</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-uppercase" condition="ose">
        <title>uppercase</title>
        <indexterm type="parameter">
            <primary>uppercase</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(uppercase "&lt;macro&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the uppercase version of the specified string or macro. For example, the following example uses the uppercase version of the hostname in a directory name:</para>
        <synopsis>destination d_file {
file ("/var/log/${MONTH}/${DAY}/$(uppercase "${HOST}")/messages");
};</synopsis>
        <para>Available in &abbrev; <phrase condition="ose">3.5</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-uuid" condition="ose">
        <title>uuid</title>
        <indexterm type="parameter">
            <primary>uuid</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(uuid)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Generates a Universally Unique IDentifier (UUID) that complies with <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://www.ietf.org/rfc/rfc4122.txt">RFC4122</link>. That way, an UUID can be added to the message soon after it is received, so messages stored in multiple destinations can be identified. For example, when storing messages in a database and also in files, the UUID can be used to find a particular message both in the database and the files.</para>
        <para>To generate a UUID, you can use a rewrite rule to create a new value-pair for the message.</para>
        <example>
            <title>Using Universally Unique Identifiers</title>
            <para>The following example adds a value-pair called <userinput>MESSAGE_UUID</userinput> to the message using a rewrite rule and a template.</para>
        </example>
        <synopsis>rewrite r_add_uuid { set("$(uuid)" value("MESSAGE_UUID")); };
destination d_file {
    file ("/var/log/messages"
          template("$MESSAGE_UUID $ISODATE $HOST $MSG\n")
          template-escape(no)
         );
};

log { source(s_network);
      rewrite(r_add_uuid);
      destination(d_file);
};</synopsis>
        <note>
            <para>This template function is available only if the <filename>tfuuid</filename> module has been loaded.</para>
            <xi:include href="../../common/chunk/para-load-module.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </note>
    </simplesect>
</section>
