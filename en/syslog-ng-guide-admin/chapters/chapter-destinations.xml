<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<chapter xml:id="chapter-destinations" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Sending and storing log messages &mdash; destinations and destination drivers</title>
    <indexterm significance="preferred">
        <primary>destinations</primary>
    </indexterm>
    <indexterm significance="preferred">
        <primary>destination drivers</primary>
    </indexterm>
    <para>A destination is where a log message is sent if the filtering rules match. Similarly to sources, destinations consist of one or more drivers, each defining where and how messages are sent.</para>
    <tip>
        <para>If no drivers are defined for a destination, all messages sent to the destination are discarded. This is equivalent to omitting the destination from the log statement.</para>
    </tip>
    <para>To define a destination, add a destination statement to the syslog-ng configuration file using the following syntax:<indexterm>
        <primary>destinations</primary>
        <secondary>defining</secondary>
    </indexterm><synopsis>destination &lt;identifier&gt; {
            destination-driver(params); destination-driver(params); ... };</synopsis></para>
    <example>
        <title>A simple destination statement</title>
        <para>The following destination statement sends messages to the TCP port <userinput>1999</userinput> of the <userinput>10.1.2.3</userinput> host.</para>
        <synopsis>destination d_demo_tcp { network("10.1.2.3" port(1999)); };</synopsis>
        <para>If name resolution is configured, you can use the hostname of the target server as well.</para>
        <synopsis>destination d_tcp { network("target_host" port(1999)); };</synopsis>
    </example>
    <warning>
        <itemizedlist>
            <listitem>
                <para>Do not define the same drivers with the same parameters more than once, because it will cause problems. For example, do not open the same file in multiple destinations.</para>
            </listitem>
            <listitem>
                <para>Do not use the same destination in different log paths, because it can cause problems with most destination types. Instead, use filters and log paths to avoid such situations.</para>
            </listitem>
            <listitem>
                <xi:include href="../../common/chunk/para-initializing-sources-destinations.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </listitem>
        </itemizedlist>
    </warning>
    <para>The following table lists the destination drivers available in &abbrev;.<phrase condition="ose"> If these destinations do not satisfy your needs, you can extend &abbrev; and write your own destination, for example, in C, Java, or Python. For details, see <xref linkend="reference-destination-custom"/>.</phrase></para>
    <xi:include href="../../common/chunk/table-destination-drivers.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-amqp.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-elasticsearch.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <section xml:id="configuring-destinations-file">
        <title>Storing messages in plain-text files</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>file()</parameter> driver</secondary>
        </indexterm>
        <para>The file driver is one of the most important destination drivers in syslog-ng. It allows to output messages to the specified text file, or to a set of files.</para>
        <para>The destination filename may include macros which get expanded when the message is written, thus a simple <parameter>file()</parameter> driver may create several files: for example, &abbrev; can store the messages of client hosts in a separate file for each host. For more information on available macros see <xref linkend="reference-macros"/>.</para>
        <para>If the expanded filename refers to a directory which does not exist, it will be created depending on the <parameter>create-dirs()</parameter> setting (both global and a per destination option).</para>
        <para>The <parameter>file()</parameter> has a single required parameter that specifies the filename that stores the log messages. For the list of available optional parameters, see <xref linkend="reference-destination-file"/>.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>file(filename options());</synopsis>
        <example xml:id="example-destination-file">
            <title>Using the file() driver</title>
            <synopsis>destination d_file { file("/var/log/messages"); };</synopsis>
        </example>
        <example xml:id="example-destination-file-macro">
            <title>Using the file() driver with macros in the file name and a template for the message</title>
            <synopsis>destination d_file {
        file("/var/log/${YEAR}.${MONTH}.${DAY}/messages"
             template("${HOUR}:${MIN}:${SEC} ${TZ} ${HOST} [${LEVEL}] ${MSG} ${MSG}\n")
             template-escape(no));
};</synopsis>
        </example>
        <xi:include href="../../common/wnt/note-logrotate.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <warning>
            <para>Since the state of each created file must be tracked by syslog-ng, it consumes some memory for each file. If no new messages are written to a file within 60 seconds (controlled by the <parameter>time-reap()</parameter> global option), it is closed, and its state is freed.</para>
            <para>Exploiting this, a DoS attack can be mounted against the system. If the number of possible destination files and its needed memory is more than the amount available on the syslog-ng server.</para>
            <para>The most suspicious macro is <parameter>${PROGRAM}</parameter>, where the number of possible variations is rather high. Do not use the <parameter>${PROGRAM}</parameter> macro in insecure environments.</para>
        </warning>
        <section xml:id="reference-destination-file">
            <title>file() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>file()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>file()</parameter> driver outputs messages to the specified text file, or to a set of files. The <parameter>file()</parameter> destination has the following options:</para>
            <xi:include href="../../common/wnt/warning-fd-ulimit.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
<!-- FIXME required parameters?? -->
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-create-dirs.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-dir-group.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-dir-owner.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-dir-perm.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flags.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                <itemizedlist>
                    <listitem>
                        <indexterm type="parameter">
                            <primary>threaded</primary>
                        </indexterm>
                        <para><emphasis>threaded</emphasis>: The <parameter>threaded</parameter> flag enables multithreading for the destination. For details on multithreading, see <xref linkend="chapter-multithreading"/>.</para>
                        <note>
                            <para>The <parameter>file</parameter> destination uses multiple threads only if the destination filename contains macros.</para>
                        </note>
                    </listitem>
                </itemizedlist>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-lines.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-frac-digits.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-fsync.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-group.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-local-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-log-fifo-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect condition="pe">
                <xi:include href="../../common/chunk/option-destination-mark-freq.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-mark-mode.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <title>overwrite-if-older()</title>
                <indexterm type="parameter">
                    <primary>overwrite-if-older()</primary>
                </indexterm>
                <indexterm>
                    <primary>overwrite_if_older()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>number</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>0</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> If set to a value higher than 0, &abbrev; checks when the file was last modified before starting to write into the file. If the file is older than the specified amount of time (in seconds), then syslog-ng removes the existing file and opens a new file with the same name. In combination with for example the <parameter>${WEEKDAY}</parameter> macro, this can be used for simple log rotation, in case not all history has to be kept. (Note that in this weekly log rotation example if its Monday 00:01, then the file from last Monday is not seven days old, because it was probably last modified shortly before 23:59 last Monday, so it is actually not even six days old. So in this case, set the <parameter>overwrite-if-older()</parameter> parameter to a-bit-less-than-six-days, for example, to <userinput>518000</userinput> seconds.</para>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-owner.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-pad-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-perm.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-suppress.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template-escape.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-ts-format.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
        </section>
    </section>
    <xi:include href="destination-graphite.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-hdfs.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-http.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-kafka.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-mongodb.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-network.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <section xml:id="configuring-destinations-pipe">
        <title>Sending messages to named pipes</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>pipe()</parameter> driver</secondary>
        </indexterm>
        <para>The <parameter>pipe()</parameter> driver sends messages to a named pipe like <filename>/dev/xconsole</filename>.</para>
        <para>The pipe driver has a single required parameter, specifying the filename of the pipe to open. The filename can include macros. For the list of available optional parameters, see <xref linkend="reference-destination-pipe"/>.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>pipe(filename);</synopsis>
        <warning>
            <para>Starting with &abbrev; 3.0.2, pipes are created automatically. In earlier versions, you had to create the pipe using the <command>mkfifo(1)</command> command.</para>
        </warning>
        <example xml:id="example-destination-pipe">
            <title>Using the pipe() driver</title>
            <synopsis>destination d_pipe { pipe("/dev/xconsole"); };</synopsis>
        </example>
        <section xml:id="reference-destination-pipe">
            <title>pipe() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>pipe()</parameter> driver</secondary>
            </indexterm>
            <para>This driver sends messages to a named pipe like <filename>/dev/xconsole</filename>.</para>
            <para>The <parameter>pipe()</parameter> destination has the following options:</para>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flags.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-lines.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-frac-digits.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-group.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-log-fifo-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect condition="pe">
                <xi:include href="../../common/chunk/option-destination-mark-freq.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-mark-mode.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-owner.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-pad-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <title>perm()</title>
                <indexterm type="parameter">
                    <primary>perm()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>number (octal notation)</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>0600</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> The permission mask of the pipe. For octal numbers prefix the number with '0', for example: use 0755 for rwxr-xr-x.</para>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-suppress.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template-escape.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-throttle.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-ts-format.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
        </section>
    </section>
    <section xml:id="configuring-destinations-program">
        <title>Sending messages to external applications</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>program()</parameter> driver</secondary>
        </indexterm>
        <para>The <parameter>program()</parameter> driver starts an external application or script and sends the log messages to its standard input (<parameter>stdin</parameter>).</para>
        <para>The <parameter>program()</parameter> driver has a single required parameter, specifying a program name to start. The program is executed with the help of the current shell, so the command may include both file patterns and I/O redirections. For the list of available optional parameters, see <xref linkend="reference-destination-program"/>.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>program(command_to_run);</synopsis>
        <note>
            <itemizedlist>
                <listitem>
                    <para>The &abbrev; application must be able to start and restart the external program, and have the necessary permissions to do so. For example, if your host is running AppArmor, you might have to modify your AppArmor configuration to enable &abbrev; to execute external applications.</para>
                </listitem>
                <listitem>
                    <para>The &abbrev; application executes program destinations through the standard system shell. If the system shell is not bash and you experience problems with the program destination, try changing the <filename>/bin/sh</filename> link to <filename>/bin/bash</filename>.</para>
                </listitem>
                <listitem>
                    <para>The &abbrev; application automatically restarts the external program if it exits for reliability reasons. However it is not recommended to launch programs for single messages, because if the message rate is high, launching several instances of an application might overload the system, resulting in Denial of Service.</para>
                </listitem>
                <listitem>
                    <para>Certain external applications buffer the log messages, which might cause unexpected latency and other problems. For example, if you send the log messages to an external Perl script, Perl uses a line buffer for terminal output and block buffer otherwise. You might want to disable buffering in the external application.</para>
                </listitem>
            </itemizedlist>
        </note>
        <example xml:id="example-destination-program">
            <title>Using the program() destination driver</title>
            <para>The message format does not include the priority and facility values by default. To add these values, specify a template for the program destination, as shown in the following example.</para>
            <synopsis>destination d_prog { program("/bin/script" template("&lt;${PRI}&gt;${DATE} ${HOST} ${MSG}\n") ); };</synopsis>
        </example>
        <section xml:id="reference-destination-program">
            <title>program() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>program()</parameter> driver</secondary>
            </indexterm>
            <para>This driver starts an external application or script and sends the log messages to its standard input (<parameter>stdin</parameter>).</para>
            <para>The <parameter>program()</parameter> destination has the following options:</para>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flags.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-lines.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-frac-digits.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-log-fifo-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect condition="pe">
                <xi:include href="../../common/chunk/option-destination-mark-freq.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-mark-mode.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-suppress.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template-escape.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-throttle.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-ts-format.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
        </section>
    </section>
    <section xml:id="configuring-destination-pseudofile">
        <title>pseudofile()</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>pseudofile()</parameter> driver</secondary>
        </indexterm>
        <para>The <parameter>pseudofile()</parameter> destination driver is a very simple driver, aimed at delivering messages to special files such as files in the <filename>/proc</filename>, <filename>/dev</filename> or <filename>/sys</filename> directories. It opens and closes the file after each write operation, instead of keeping it open. It does not append further data. It does not support templates in the filename, and does not have a queue, processing is performed immediately as read by the source. Therefore, no loss is possible, but it takes CPU time from the source, so it is not adequate in high traffic situations.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>pseudofile(filename options());</synopsis>
        <section xml:id="reference-destination-pseudofile">
            <title>pseudofile() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>pseudofile()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>pseudofile()</parameter> destination has the following options:</para>
            <simplesect>
                <title>file()</title>
                <indexterm type="parameter">
                    <primary>file()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>filename with path</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry/>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> The file to write messages to, including the path.</para>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
        </section>
    </section>
    <xi:include href="destination-redis.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-riemann.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-smtp.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <section xml:id="configuring-destinations-sql">
        <title>Storing messages in an SQL database</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>sql()</parameter> driver</secondary>
        </indexterm>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary>database driver</secondary>
        </indexterm>
        <indexterm>
            <primary>sql destinations</primary>
        </indexterm>
        <para>The <parameter>sql()</parameter> driver sends messages into an SQL database. Currently the Microsoft SQL (MSSQL), MySQL, Oracle, PostgreSQL, and SQLite databases are supported.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>sql(database_type host_parameters database_parameters [options]);</synopsis>
        <para>The <parameter>sql()</parameter> driver has the following required parameters: <link linkend="sql-option-type"><parameter>type()</parameter></link>, <link linkend="sql-option-database"><parameter>database()</parameter></link>, <link linkend="sql-option-table"><parameter>table()</parameter></link>, <link linkend="sql-option-columns"><parameter>columns()</parameter></link>, and <link linkend="sql-option-values"><parameter>values()</parameter></link>.</para>
        <warning>
            <para>The syslog-ng application requires read and write access to the SQL table, otherwise it cannot verify that the destination table exists.</para>
            <para>Currently the syslog-ng application has default schemas for the different databases and uses these defaults if the database schema (for example columns and column types) is not defined in the configuration file. However, these schemas will be deprecated and specifying the exact database schema will be required in later versions of syslog-ng.</para>
        </warning>
        <note condition="pe">
            <para>In addition to the standard syslog-ng packages, the <parameter>sql()</parameter> destination requires database-specific packages to be installed. These packages are automatically installed by the binary syslog-ng installer.</para>
            <para>The <parameter>sql()</parameter> driver is currently not available for every platform that is supported by syslog-ng. For a list of platforms that support the <parameter>sql()</parameter> driver, <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://www.balabit.com/network-security/syslog-ng/central-syslog-server/specifications">visit this link</link>.</para>
        </note>
        <para>The <parameter>table</parameter> and <parameter>value</parameter> parameters can include macros to create tables and columns dynamically (for details, see <xref linkend="reference-macros"/>).</para>
        <warning>
            <para>When using macros in table names, note that some databases limit the maximum allowed length of table names. Consult the documentation of the database for details.</para>
        </warning>
        <para>Inserting the records into the database is performed by a separate thread. The syslog-ng application automatically performs the escaping required to insert the messages into the database.</para>
        <example xml:id="example-destination-sql">
            <title>Using the sql() driver</title>
            <indexterm>
                <primary>destinations</primary>
                <secondary>sql() configuration</secondary>
            </indexterm>
            <indexterm>
                <primary>PostgreSQL</primary>
                <secondary>sql() configuration</secondary>
            </indexterm>
            <para>The following example sends the log messages into a PostgreSQL database running on the <userinput>logserver</userinput> host. The messages are inserted into the <userinput>logs</userinput> database, the name of the table includes the exact date and the name of the host sending the messages. The syslog-ng application automatically creates the required tables and columns, if the user account used to connect to the database has the required privileges.</para>
            <synopsis>destination d_sql {
  sql(type(pgsql)
  host("logserver") username("syslog-ng") password("password")
  database("logs")
  table("messages_${HOST}_${R_YEAR}${R_MONTH}${R_DAY}")
  columns("datetime", "host", "program", "pid", "message")
  values("{$R_DATE}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}")
  indexes("datetime", "host", "program", "pid", "message"));
};</synopsis>
            <para>The following example specifies the type of the database columns as well:</para>
            <synopsis>destination d_sql {
  sql(type(pgsql)
  host("logserver") username("syslog-ng") password("password")
  database("logs")
  table("messages_${HOST}_${R_YEAR}${R_MONTH}${R_DAY}")
  columns("datetime varchar(16)", "host varchar(32)", "program  varchar(20)", "pid varchar(8)", "message  varchar(200)")
  values("${R_DATE}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}")
  indexes("datetime", "host", "program", "pid", "message"));
};</synopsis>
        </example>
        <section xml:id="configuring-sql-oracle">
            <title>Using the sql() driver with an Oracle database</title>
            <indexterm>
                <primary>Oracle</primary>
                <secondary>sql() configuration</secondary>
            </indexterm>
            <para>The Oracle sql destination has some special aspects that are important to note.</para>
            <itemizedlist>
                <listitem>
                    <para>The hostname of the database server is set in the <filename>tnsnames.ora</filename> file, not in the <parameter>host</parameter> parameter of the <parameter>sql()</parameter> destination.</para>
                    <para>If the <filename>tnsnames.ora</filename> file is not located in the /etc directory (or in the /var/opt/oracle directory on Solaris), set the following Oracle-related environment variables, so &abbrev; will find the file: <parameter>ORACLE_BASE</parameter>, <parameter>ORACLE_HOME</parameter>, and <parameter>ORACLE_SID</parameter>. For details, see the documentation of the Oracle Instant Client.</para>
                </listitem>
                <listitem>
                    <para>You cannot use the same <parameter>database()</parameter> settings in more than one destination, because the <parameter>database()</parameter> option of the SQL driver is just a reference to the connection string of the <filename>tnsnames.ora</filename> file. To overcome this problem, you can duplicate the connections in the <filename>tnsnames.ora</filename> file under a different name, and use a different table in each Oracle destination in &abbrev;.</para>
                </listitem>
                <listitem>
                    <para>As certain database versions limit the maximum length of table names, macros in the table names should be used with care.</para>
                </listitem>
                <listitem>
<!-- FIXME delete when solved -->
                    <para>In the current version of &abbrev;, the types of database columns must be explicitly set for the Oracle destination. The column used to store the text part of the syslog messages should be able to store messages as long as the longest message permitted by syslog-ng, therefore it is usually recommended to use the <userinput>varchar2</userinput> or <userinput>clob</userinput> column type. (The maximum length of the messages can be set using the <parameter>log-msg-size()</parameter> option.) For details, see the following example.</para>
                </listitem>
                <listitem>
                    <para>The Oracle Instant Client used by &abbrev; supports only the following character sets:</para>
                    <itemizedlist>
                        <listitem>
                            <para>Single-byte character sets: <userinput>US7ASCII, WE8DEC, WE8MSWIN1252, and WE8ISO8859P1</userinput></para>
                        </listitem>
                        <listitem>
                            <para>Unicode character sets: <userinput>UTF8, AL16UTF16, and AL32UTF8</userinput></para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <example xml:id="example-destination-sql-oracle">
                <title>Using the sql() driver with an Oracle database</title>
                <indexterm>
                    <primary>destinations</primary>
                    <secondary>sql() configuration</secondary>
                </indexterm>
                <indexterm>
                    <primary>Oracle</primary>
                    <secondary>sql() configuration</secondary>
                </indexterm>
                <para>The following example sends the log messages into an Oracle database running on the <userinput>logserver</userinput> host, which must be set in the <filename>/etc/tnsnames.ora</filename> file. The messages are inserted into the <userinput>LOGS</userinput> database, the name of the table includes the exact date when the messages were sent. The syslog-ng application automatically creates the required tables and columns, if the user account used to connect to the database has the required privileges.</para>
                <synopsis>destination d_sql {
  sql(type(oracle)
  username("syslog-ng") password("password")
  database("LOGS")
  table("msgs_${R_YEAR}${R_MONTH}${R_DAY}")
  columns("datetime varchar(16)", "host varchar(32)", "program varchar(32)", "pid varchar(8)", "message varchar2")
  values("${R_DATE}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}")
  indexes("datetime", "host", "program", "pid", "message"));
};</synopsis>
                <para>The Oracle Instant Client retrieves the address of the database server from the <filename>/etc/tnsnames.ora</filename> file. Edit or create this file as needed for your configuration. A sample is provided below.</para>
                <synopsis>LOGS =
(DESCRIPTION =
(ADDRESS_LIST =
(ADDRESS = (PROTOCOL = TCP)
(HOST = logserver)
(PORT = 1521))
)
(CONNECT_DATA =
(SERVICE_NAME = EXAMPLE.SERVICE)
)
)</synopsis>
            </example>
        </section>
        <section xml:id="configuring-sql-mssql">
            <title>Using the sql() driver with a Microsoft SQL database</title>
            <indexterm>
                <primary>Microsoft SQL</primary>
                <secondary>sql() configuration</secondary>
            </indexterm>
            <indexterm>
                <primary>MSSQL</primary>
                <secondary>sql() configuration</secondary>
            </indexterm>
            <para>The <parameter>mssql</parameter> database driver can access Microsoft SQL (MSSQL) destinations. This driver has some special aspects that are important to note.</para>
            <itemizedlist>
                <listitem>
                    <para>The date format used by the MSSQL database must be explicitly set in the <filename>/etc/locales.conf</filename> file of the syslog-ng server. For details, see the following example.</para>
                </listitem>
                <listitem>
                    <para>As certain database versions limit the maximum length of table names, macros in the table names should be used with care.</para>
                </listitem>
                <listitem>
                    <para>In the current version of &abbrev;, the types of database columns must be explicitly set for the MSSQL destination.</para>
                    <xi:include href="../../common/wnt/warning-destination-mssql-columntypes.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                </listitem>
                <listitem>
                    <para>The column used to store the text part of the syslog messages should be able to store messages as long as the longest message permitted by syslog-ng. The <parameter>varchar</parameter> column type can store maximum 4096 bytes-long messages. The maximum length of the messages can be set using the <parameter>log-msg-size()</parameter> option. For details, see the following example.</para>
                </listitem>
                <listitem>
                    <para>Remote access for SQL users must be explicitly enabled on the Microsoft Windows host running the Microsoft SQL Server. For details, see <xref linkend="configure-mssql-server"/>.</para>
                </listitem>
            </itemizedlist>
            <example xml:id="example-destination-sql-mssql">
                <title>Using the sql() driver with an MSSQL database</title>
                <indexterm>
                    <primary>destinations</primary>
                    <secondary>sql() configuration</secondary>
                </indexterm>
                <indexterm>
                    <primary>MSSQL</primary>
                    <secondary>sql() configuration</secondary>
                </indexterm>
                <para>The following example sends the log messages into an MSSQL database running on the <userinput>logserver</userinput> host. The messages are inserted into the <userinput>syslogng</userinput> database, the name of the table includes the exact date when the messages were sent. The syslog-ng application automatically creates the required tables and columns, if the user account used to connect to the database has the required privileges.</para>
                <synopsis>destination d_mssql {
sql(type(mssql) host("logserver") port("1433")
  username("syslogng") password("syslogng") database("syslogng")
  table("msgs_${R_YEAR}${R_MONTH}${R_DAY}")columns("datetime varchar(16)", "host varchar(32)",
  "program varchar(32)", "pid varchar(8)", "message varchar(4096)")
  values("${R_DATE}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}")
  indexes("datetime", "host", "program", "pid"));
};</synopsis>
                <para>The date format used by the MSSQL database must be explicitly set in the <filename>/etc/locales.conf</filename> file of the syslog-ng server. Edit or create this file as needed for your configuration. A sample is provided below.</para>
                <synopsis>[default]
date = "%Y-%m-%d %H:%M:%S"</synopsis>
            </example>
        </section>
        <section xml:id="sql-interactions-syslog-ng">
            <title>The way syslog-ng interacts with the database</title>
            <formalpara>
                <title>Used SQL operations by syslog-ng</title>
                <para/>
            </formalpara>
            <para><emphasis>Create table:</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para>If the given table does not exist, syslog-ng tries to create it with the given column types.</para>
                </listitem>
                <listitem>
                    <para>The &abbrev; application automatically creates the required tables and columns, if the user account used to connect to the database has the required privileges.</para>
                </listitem>
                <listitem>
                    <para>If syslog-ng cannot create or alter a table, it tries to do it again when it reaches the next <parameter>time-reopen()</parameter>.</para>
                </listitem>
            </itemizedlist>
            <para><emphasis>Alter table:</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para>If the table structure is different from given structure in an existing table, syslog-ng tries to add columns in this table but never will delete or modify an existing column.</para>
                </listitem>
                <listitem>
                    <para>If &abbrev; cannot create or alter a table, it tries to do it again when reach the next <parameter>time-reopen()</parameter>.</para>
                </listitem>
                <listitem>
                    <para>The &abbrev; application requires read and write access to the SQL table, otherwise it cannot verify that the destination table exists.</para>
                </listitem>
            </itemizedlist>
            <para><emphasis>Insert table:</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para>Insert new records in a table.</para>
                </listitem>
                <listitem>
                    <para>Inserting the records into the database is performed by a separate thread.</para>
                </listitem>
                <listitem>
                    <para>The &abbrev; application automatically performs the escaping required to insert the messages into the database.</para>
                </listitem>
                <listitem>
                    <para>If insert returns with error, syslog-ng tries to insert the message +two times by default, then drops it. Retrying time is the value of <parameter>time-reopen()</parameter>.</para>
                </listitem>
            </itemizedlist>
            <formalpara>
                <title>Encoding</title>
                <para/>
            </formalpara>
            <para>The &abbrev; application uses UTF-8 by default when writes logs into database.</para>
            <formalpara>
                <title>Start/stop and reload</title>
                <para/>
            </formalpara>
            <para><emphasis>Start:</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para>The &abbrev; application will connect to database automatically after starting regardless existing incoming messages.</para>
                </listitem>
            </itemizedlist>
            <para><emphasis>Stop:</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para>The &abbrev; application will close the connection to database before shutting down.</para>
                </listitem>
            </itemizedlist>
            <para condition="pe"><emphasis>Possibility of losing logs:</emphasis></para>
            <itemizedlist condition="pe">
                <listitem>
                    <para>The &abbrev; application cannot lose logs during shutting down if disk buffer was given and it is not full yet.</para>
                </listitem>
                <listitem>
                    <para>The &abbrev; application cannot lose logs during shutting down if disk buffer was not given.</para>
                </listitem>
            </itemizedlist>
            <para><emphasis>Reload:</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para>The &abbrev; application will close the connection to database if it received SIGHUP signal (reload).</para>
                </listitem>
                <listitem>
                    <para>It will reconnect to the database when it tries to send a new message to this database again.</para>
                </listitem>
            </itemizedlist>
            <formalpara>
                <title>Macros:</title>
                <para/>
            </formalpara>
            <para>The value of ${SEQNUM} macro will be overrided by sql driver regardless of local or relayed incoming message.</para>
            <para>It will be grown continously.</para>
            <section>
                <title>MySQL-specific interaction methods</title>
                <para>To specify the socket to use, set and export the <parameter>MYSQL_UNIX_PORT</parameter> environment variable, for example <userinput>MYSQL_UNIX_PORT=/var/lib/mysql/mysql.sock; export MYSQL_UNIX_PORT</userinput>.</para>
            </section>
            <section>
                <title>MsSQL-specific interaction methods</title>
                <para>In SQL Server 2005 this restriction is lifted - kind of. The total length of all key columns in an index cannot exceed 900 bytes.</para>
                <para>If you are using <parameter>null()</parameter> in your configuration, be sure that the columns allow <parameter>NULL</parameter> to insert. Give the column as the following example: <userinput>"datetime varchar(16) NULL"</userinput>.</para>
                <para>The date format used by the MSSQL database must be explicitly set in the <filename>/etc/locales.conf</filename> file of the syslog-ng server. <userinput>[default] date = "%Y-%m-%d %H:%M:%S"</userinput>.</para>
            </section>
        </section>
        <section xml:id="reference-destination-sql">
            <title>sql() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>sql()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary>database driver</secondary>
            </indexterm>
            <para>This driver sends messages into an SQL database. The <parameter>sql()</parameter> destination has the following options:</para>
            <simplesect xml:id="sql-option-columns">
                <title>columns()</title>
                <indexterm type="parameter">
                    <primary>columns()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>string list</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>"date", "facility", "level", "host", "program", "pid", "message"</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> Name of the columns storing the data in <userinput>fieldname [dbtype]</userinput> format. The <userinput>[dbtype]</userinput> parameter is optional, and specifies the type of the field. By default, &abbrev; creates <userinput>text</userinput> columns. Note that not every database engine can index text fields.</para>
                <xi:include href="../../common/wnt/warning-destination-mssql-columntypes.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect xml:id="sql-option-database">
                <xi:include href="../../common/chunk/option-sql-database.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect xml:id="sql-option-dbd-option" condition="ose">
                <title>dbd-option()</title>
                <indexterm type="parameter">
                    <primary>dbd-option()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>string</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>empty string</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> Specify database options that are set whenever &abbrev; connects to the database server. Consult the documentation of your database server for details on the available options. Syntax:</para>
                <synopsis>dbd-option(OPTION_NAME VALUE)</synopsis>
                <para>OPTION_NAME is always a string, VALUE is a string or a number. For example:</para>
                <synopsis>dbd-option("null.sleep.connect" 1)
dbd-option("null.sleep.query" 5)</synopsis>
            </simplesect>
            <simplesect xml:id="sql-option-flags">
                <title>flags()</title>
                <indexterm type="parameter">
                    <primary>flags()</primary>
                    <secondary>for SQL destinations</secondary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>list of flags</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>empty string</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> Flags related to the <parameter>sql()</parameter> destination.</para>
                <itemizedlist>
                    <listitem>
                        <para><emphasis>dont-create-tables</emphasis>: Enable this flag to prevent &abbrev; from creating non-existing database tables automatically. The &abbrev; application typically has to create tables if you use macros in the table names. Available in &abbrev; version <phrase condition="ose">3.2</phrase><phrase condition="pe">4.0</phrase> and later.</para>
                        <indexterm type="parameter">
                            <primary>dont-create-tables</primary>
                        </indexterm>
                    </listitem>
                    <listitem>
                        <para><emphasis>explicit-commits</emphasis>: By default, &abbrev; commits every log message to the target database individually. When the <parameter>explicit-commits</parameter> option is enabled, messages are committed in batches. This improves the performance, but results in some latency, as the messages are not immediately sent to the database. The size and frequency of batched commits can be set using the <parameter>flush-lines()</parameter> and <parameter>flush-timeout()</parameter> parameters. The <parameter>explicit-commits</parameter> option is available in &abbrev; version <phrase condition="ose">3.2</phrase><phrase condition="pe">4.0</phrase> and later.</para>
                        <indexterm type="parameter">
                            <primary>explicit-commits</primary>
                        </indexterm>
                    </listitem>
                </itemizedlist>
                <example>
                    <title>Setting flags for SQL destinations</title>
                    <para>The following example sets the <parameter>dont-create-tables</parameter> and <parameter>explicit-commits</parameter> flags for an <parameter>sql()</parameter> destination.</para>
                    <synopsis>flags(dont-create-tables,explicit-commits)</synopsis>
                </example>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-lines.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-frac-digits.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect xml:id="sql-option-host">
                <xi:include href="../../common/chunk/option-sql-host.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect xml:id="sql-option-indexes">
                <title>indexes()</title>
                <indexterm type="parameter">
                    <primary>indexes()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>string list</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>"date", "facility", "host", "program"</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> The list of columns that are indexed by the database to speed up searching. To disable indexing for the destination, include the empty <parameter>indexes()</parameter> parameter in the destination, simply omitting the <parameter>indexes</parameter> parameter will cause syslog-ng to request indexing on the default columns.</para>
                <para>The &abbrev; application will create the name of indexes automaticaly with the following method:</para>
                <itemizedlist>
                    <listitem>
                        <para>In case of MsSQL, PostgreSQL, MySQL or SQLite or (Oracle but tablename &lt; 30 characters): <userinput>{table}_{column}_idx</userinput>.</para>
                    </listitem>
                    <listitem>
                        <para>In case of Oracle and tablename &gt; 30 characters: <userinput>md5sum of {table}_{column}-1</userinput> and the first character will be replaced by "i" character and the md5sum will be truncated to 30 characters.</para>
                    </listitem>
                </itemizedlist>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-local-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-log-fifo-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect xml:id="sql-option-null">
                <title>null()</title>
                <indexterm type="parameter">
                    <primary>null()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>string</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry/>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> If the content of a column matches the string specified in the <parameter>null()</parameter> parameter, the contents of the column will be replaced with an SQL NULL value. If unset (by default), the option does not match on any string. For details, see the <xref linkend="example-destination-sql-null"/>.</para>
                <example xml:id="example-destination-sql-null">
                    <title>Using SQL NULL values</title>
                    <indexterm>
                        <primary>destinations</primary>
                        <secondary>sql() configuration</secondary>
                    </indexterm>
                    <indexterm>
                        <primary>SQL NULL values</primary>
                    </indexterm>
                    <para>The <parameter>null()</parameter> parameter of the SQL driver can be used to replace the contents of a column with a special SQL NULL value. To replace every column that contains an empty string with NULL, use the <userinput>null("")</userinput> option, for example</para>
                    <synopsis>destination d_sql {
    sql(type(pgsql)
    host("logserver") username("syslog-ng") password("password")
    database("logs")
    table("messages_${HOST}_${R_YEAR}${R_MONTH}${R_DAY}")
    columns("datetime", "host", "program", "pid", "message")
    values("${R_DATE}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}")
    indexes("datetime", "host", "program", "pid", "message")
    null(""));
};</synopsis>
                    <para>To replace only a specific column (for example <parameter>pid</parameter>) if it is empty, assign a default value to the column, and use this default value in the <parameter>null()</parameter> parameter:</para>
                    <synopsis>destination d_sql {
    sql(type(pgsql)
    host("logserver") username("syslog-ng") password("password")
    database("logs")
    table("messages_${HOST}_${R_YEAR}${R_MONTH}${R_DAY}")
    columns("datetime", "host", "program", "pid", "message")
    values("${R_DATE}", "${HOST}", "${PROGRAM}", "${PID:-@@NULL@@}", "${MSGONLY}")
    indexes("datetime", "host", "program", "pid", "message")
    null("@@NULL@@"));
};</synopsis>
                    <para>Ensure that the default value you use does not appear in the actual log messages, because other occurrences of this string will be replaced with NULL as well.</para>
                </example>
            </simplesect>
            <simplesect xml:id="sql-option-password">
                <xi:include href="../../common/chunk/option-sql-password.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect xml:id="sql-option-port">
                <xi:include href="../../common/chunk/option-sql-port.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect xml:id="sql-option-retry-sql-inserts">
                <title>retries()</title>
                <indexterm type="parameter">
                    <primary>retry_sql_inserts</primary>
<!-- This is an alias used in older documentation releases -->
                </indexterm>
                <indexterm type="parameter">
                    <primary>retries()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>number (insertion attempts)</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>3</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> The number of insertion attempts. If &abbrev; could not insert a message into the database, it will repeat the attempt until the number of attempts reaches <parameter>retries</parameter>, then drops the connection to the database. For example, &abbrev; will try to insert a message maximum three times by default (once for first insertion and twice if the first insertion was failed).</para>
            </simplesect>
            <simplesect xml:id="sql-option-session-statements">
                <title>session-statements()</title>
                <indexterm type="parameter">
                    <primary>session-statements()</primary>
                </indexterm>
                <indexterm>
                    <primary>session_statements()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>comma-separated list of SQL statements</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>empty string</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> Specifies one or more SQL-like statement which is executed after &abbrev; has successfully connected to the database. For example:</para>
                <synopsis>session-statements("SET COLLATION_CONNECTION='utf8_general_ci'")</synopsis>
                <warning>
                    <para>The &abbrev; application does not validate or limit the contents of customized queries. Consequently, queries performed with a user with write-access can potentially modify or even harm the database. Use customized queries with care, and only for your own responsibility.</para>
                </warning>
            </simplesect>
            <simplesect xml:id="sql-option-table">
                <title>table()</title>
                <indexterm type="parameter">
                    <primary>table()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>string</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>messages</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> Name of the database table to use (can include macros). When using macros, note that some databases limit the length of table names.</para>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect xml:id="sql-option-type">
                <title>type()</title>
                <indexterm type="parameter">
                    <primary>type()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>mssql, mysql, oracle, pgsql, or sqlite3</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>mysql</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <xi:include href="../../common/chunk/option-description-sql-type.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-sql-username.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect xml:id="sql-option-values">
                <title>values()</title>
                <indexterm type="parameter">
                    <primary>values()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>string list</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>"${R_YEAR}-${R_MONTH}-${R_DAY}, ${R_HOUR}:${R_MIN}:${R_SEC}", "${FACILITY}", "${LEVEL}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}"</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> The parts of the message to store in the fields specified in the <parameter>columns()</parameter> parameter.</para>
                <para>It is possible to give a special value calling: default (without quotation marks).It means that the value will be used that is the default of the column type of this value.</para>
                <example>
                    <title>Value: default</title>
                    <synopsis>columns("date datetime", "host varchar(32)", "row_id serial")
    values("${R_DATE}", "${HOST}", default)</synopsis>
                </example>
            </simplesect>
        </section>
    </section>
    <xi:include href="destination-stomp.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <section xml:id="configuring-destinations-syslog">
        <title>Sending messages to a remote logserver using the IETF-syslog protocol</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>syslog()</parameter> driver</secondary>
        </indexterm>
        <para>The <parameter>syslog()</parameter> driver sends messages to a remote host (for example a syslog-ng server or relay) on the local intranet or internet using the new standard syslog protocol developed by IETF (for details about the new protocol, see <xref linkend="concepts-message-ietfsyslog"/>). The protocol supports sending messages using the UDP, TCP, or the encrypted TLS networking protocols.</para>
        <para>The required arguments of the driver are the address of the destination host (where messages should be sent). The transport method (networking protocol) is optional, syslog-ng uses the TCP protocol by default. For the list of available optional parameters, see <xref linkend="reference-destination-syslog-chapter"/>.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>syslog(host transport [options]);</synopsis>
        <note>
            <para>Note that the <parameter>syslog</parameter> destination driver has required parameters, while the source driver defaults to the local bind address, and every parameter is optional.</para>
        </note>
        <para>The <parameter>udp</parameter> transport method automatically sends multicast packets if a multicast destination address is specified. The <parameter>tcp</parameter> and <parameter>tls</parameter> methods do not support multicasting.</para>
        <note>
            <para>The default ports for the different transport protocols are as follows: UDP &mdash; 514; TCP &mdash; 601; TLS &mdash; 6514.</para>
        </note>
        <example xml:id="example-destination-syslog">
            <title>Using the syslog() driver</title>
            <synopsis>destination d_tcp { syslog("10.1.2.3" transport("tcp") port(1999) localport(999)); };</synopsis>
            <para>If name resolution is configured, the hostname of the target server can be used as well.</para>
            <synopsis>destination d_tcp { syslog("target_host" transport("tcp") port(1999) localport(999)); };</synopsis>
            <para>Send the log messages using TLS encryption and use mutual authentication. For details on the encryption and authentication options, see <xref linkend="tlsoptions"/>.</para>
            <synopsis>destination d_syslog_tls {
    syslog("10.100.20.40"
        transport("tls")
        port(6514)
        tls(peer-verify(required-trusted)
            ca-dir('/opt/syslog-ng/etc/syslog-ng/keys/ca.d/')
            key-file('/opt/syslog-ng/etc/syslog-ng/keys/client_key.pem')
            cert-file('/opt/syslog-ng/etc/syslog-ng/keys/client_certificate.pem')
        )
    );
};</synopsis>
        </example>
        <xi:include href="../../common/wnt/note-formatting-messages.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <section xml:id="reference-destination-syslog-chapter">
            <title>syslog() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>syslog()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>syslog()</parameter> driver sends messages to a remote host (for example a syslog-ng server or relay) on the local intranet or internet using the RFC5424 syslog protocol developed by IETF (for details about the protocol, see <xref linkend="concepts-message-ietfsyslog"/>). The protocol supports sending messages using the <phrase condition="pe"><trademark>RLTP</trademark>, </phrase>UDP, TCP, or the encrypted TLS networking protocols.</para>
            <para xml:id="table-destination-syslog-options">These destinations have the following options:</para>
            <xi:include href="../../common/chunk/destination-syslog-options.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </section>
    </section>
    <xi:include href="destination-tcpudp.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <section xml:id="configuring-destinations-unixstream">
        <title>Sending messages to UNIX domain sockets</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>unix-stream()</parameter> driver</secondary>
        </indexterm>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>unix-dgram()</parameter> driver</secondary>
        </indexterm>
        <para>The <parameter>unix-stream()</parameter> and <parameter>unix-dgram()</parameter> drivers send messages to a UNIX domain socket in either <parameter>SOCK_STREAM</parameter> or <parameter>SOCK_DGRAM</parameter> mode.</para>
        <para>Both drivers have a single required argument specifying the name of the socket to connect to. For the list of available optional parameters, see <xref linkend="reference-destination-unixstream"/>.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>unix-stream(filename [options]);
unix-dgram(filename [options]);</synopsis>
        <example xml:id="example-destination-unixstream">
            <title>Using the unix-stream() driver</title>
            <synopsis>destination d_unix_stream { unix-stream("/var/run/logs"); };</synopsis>
        </example>
        <section xml:id="reference-destination-unixstream">
            <title>unix-stream() and unix-dgram() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>unix-stream()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>unix-dgram()</parameter> driver</secondary>
            </indexterm>
            <para>These drivers send messages to a unix socket in either <parameter>SOCK_STREAM</parameter> or <parameter>SOCK_DGRAM</parameter> mode. The <parameter>unix-stream()</parameter> and <parameter>unix-dgram()</parameter> destinations have the following options:</para>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-create-dirs.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flags.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-lines.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-frac-digits.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-log-fifo-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-keep-alive.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-so-broadcast.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-source-so-keepalive.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect condition="pe">
                <xi:include href="../../common/chunk/option-destination-mark-freq.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-mark-mode.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-so-rcvbuf.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-so-sndbuf.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-suppress.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template-escape.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-throttle.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-ts-format.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
        </section>
    </section>
    <section xml:id="reference-destination-usertty">
        <title>Sending messages to a user terminal &mdash; usertty() destination</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>usertty()</parameter> driver</secondary>
        </indexterm>
        <para>This driver writes messages to the terminal of a logged-in user.</para>
        <para>The <parameter>usertty()</parameter> driver has a single required argument, specifying a username who should receive a copy of matching messages. Use the asterisk <userinput>*</userinput> to specify every user currently logged in to the system.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>usertty(username);</synopsis>
        <para>The <parameter>usertty()</parameter> does not have any further options nor does it support templates.</para>
        <example>
            <title>Using the usertty() driver</title>
            <synopsis>destination d_usertty { usertty("root"); };</synopsis>
        </example>
    </section>
    <section xml:id="reference-destination-custom" condition="ose">
        <title>Write your own custom destination in Java or Python</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary>custom</secondary>
        </indexterm>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary>C</secondary>
        </indexterm>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary>Java</secondary>
        </indexterm>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary>Python</secondary>
        </indexterm>
        <para>The &abbrev; application is open source, so if you have the necessary programming skills, you can extend it if its features are not adequate for your particular environment or needs. You can write destinations and other extensions to &abbrev; in C (the main language of &abbrev;), or using its language bindings, for example, Java or Python. For details on extending &abbrev;, see the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://www.gitbook.com/book/syslog-ng/getting-started/details">&abbrev; Developer Guide</link>.</para>
    </section>
</chapter>
