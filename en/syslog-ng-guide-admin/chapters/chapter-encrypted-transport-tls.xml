<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<chapter xml:id="chapter-encrypted-transport-tls" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>TLS-encrypted message transfer</title>
    <!-- FIXME jumplist -->
    <section xml:id="concepts-tls">
        <title>Secure logging using TLS</title>
        <indexterm> <primary>TLS</primary> </indexterm>
        <indexterm> <primary>transport layer security</primary> <secondary>TLS</secondary> </indexterm>
        <indexterm> <primary>encrypting log messages</primary> </indexterm>
        <indexterm> <primary>authentication</primary> </indexterm>
        <para>The syslog-ng application can send and receive log messages securely over the network using the Transport Layer Security (TLS) protocol using the <parameter>network()</parameter> and <parameter>syslog()</parameter> drivers.</para>
        <!-- FIXME certain other non-syslog destinations also support tls, mention them and add links (elastic, curl, ...) -->
        <para>TLS uses certificates to authenticate and encrypt the communication, as illustrated on the following figure:</para>
        <figure>
            <title>Certificate-based authentication</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata format="PNG" fileref="certificate-based_authentication01.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata format="PNG" fileref="&imgroot;/certificate-based_authentication01.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        <indexterm> <primary>certificates</primary> </indexterm>
        <para>The client authenticates the server by requesting its certificate and public key. Optionally, the server can also request a certificate from the client, thus mutual authentication is also possible.</para>
        <para>In order to use TLS encryption in syslog-ng, the following elements are required:</para>
        <itemizedlist>
            <listitem>
                <para>A certificate on the syslog-ng server that identifies the syslog-ng server.</para>
            </listitem>
            <listitem>
                <para>The certificate of the Certificate Authority that issued the certificate of the syslog-ng server (or the self-signed certificate of the syslog-ng server) must be available on the syslog-ng client.</para>
            </listitem>
        </itemizedlist>
        <para>When using mutual authentication to verify the identity of the clients, the following elements are required:</para>
        <indexterm> <primary>authentication</primary> </indexterm>
        <indexterm> <primary>mutual authentication</primary> </indexterm>
        <itemizedlist>
            <listitem>
                <para>A certificate must be available on the syslog-ng client. This certificate identifies the syslog-ng client.</para>
            </listitem>
            <listitem>
                <para>The certificate of the Certificate Authority that issued the certificate of the syslog-ng client must be available on the syslog-ng server.</para>
            </listitem>
        </itemizedlist>
        <para>Mutual authentication ensures that the syslog-ng server accepts log messages only from authorized clients.</para>
        <para>For details on configuring TLS communication in syslog-ng, see <xref linkend="tls-serverauth"/>.</para>
    </section>
    <section xml:id="tls-serverauth">
        <title>Encrypting log messages with TLS</title>
        <indexterm> <primary>TLS</primary> <secondary>configuring</secondary> </indexterm>
        <indexterm> <primary>authentication</primary> </indexterm>
        <indexterm> <primary>encrypting log messages</primary> </indexterm>
        <para>This section describes how to configure TLS encryption in syslog-ng. For the concepts of using TLS in syslog-ng, see <xref linkend="concepts-tls"/>.</para>
        <para>Create an X.509 certificate for the syslog-ng server.</para>
        <xi:include href="../../common/wnt/note-cert-common-name.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <!-- FIXME add a sample scenario for commonname/altname -->
        <procedure xml:id="procedure-configuring-tls-client">
            <title>Configuring TLS on the syslog-ng clients</title>
            <formalpara>
                <title>Purpose:</title>
                <para/>
            </formalpara>
            <para>Complete the following steps on every syslog-ng client host. Examples are provided using both the legacy BSD-syslog protocol (using the <parameter>network()</parameter> driver) and the new IETF-syslog protocol standard (using the <parameter>syslog()</parameter> driver):</para>
            <formalpara>
                <title>Steps:</title>
                <para/>
            </formalpara>
            <step>
                <para>Copy the CA certificate (for example <filename>cacert.pem</filename>) of the Certificate Authority that issued the certificate of the syslog-ng server (or the self-signed certificate of the syslog-ng server) to the syslog-ng client hosts, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/ca.d</filename> directory.</para>
                <para>Issue the following command on the certificate: <command>openssl x509 -noout -hash -in cacert.pem</command> The result is a hash (for example <userinput>6d2962a8</userinput>), a series of alphanumeric characters based on the Distinguished Name of the certificate.</para>
                <para>Issue the following command to create a symbolic link to the certificate that uses the hash returned by the previous command and the <userinput>.0</userinput> suffix.</para>
                <para><command>ln -s cacert.pem 6d2962a8.0</command></para>
            </step>
            <step>
                <para>Add a destination statement to the syslog-ng configuration file that uses the <userinput>tls( ca-dir(path_to_ca_directory) )</userinput> option and specify the directory using the CA certificate. The destination must use the <parameter>network()</parameter> or the <parameter>syslog()</parameter> destination driver, and the IP address and port parameters of the driver must point to the syslog-ng server.</para>
                <example>
                    <title>A destination statement using TLS</title>
                    <para>The following destination encrypts the log messages using TLS and sends them to the <userinput>6514/TCP</userinput> port of the syslog-ng server having the <userinput>10.1.2.3</userinput> IP address.</para>
                    <synopsis>destination demo_tls_destination {
    network("10.1.2.3" port(6514)
        transport("tls")
        tls( ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d"))
    );
};</synopsis>
                    <para>A similar statement using the IETF-syslog protocol and thus the <parameter>syslog()</parameter> driver:</para>
                    <synopsis>destination demo_tls_syslog_destination {
    syslog("10.1.2.3" port(6514)
                        transport("tls")
        tls(ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d"))
    );
};</synopsis>
                </example>
            </step>
            <step>
                <para>Include the destination created in Step 2 in a log statement.</para>
                <warning>
                    <para>The encrypted connection between the server and the client fails if the <parameter>Common Name</parameter> or the <parameter>subject_alt_name</parameter> parameter of the server certificate does not contain the hostname or the IP address (as resolved from the syslog-ng clients and relays) of the server.</para>
                    <para>Do not forget to update the certificate files when they expire.</para>
                </warning>
            </step>
        </procedure>
        <procedure xml:id="procedure-configuring-tls-server">
            <title>Configuring TLS on the syslog-ng server</title>
            <formalpara>
                <title>Purpose:</title>
                <para/>
            </formalpara>
            <para>Complete the following steps on the syslog-ng server:</para>
            <formalpara>
                <title>Steps:</title>
                <para/>
            </formalpara>
            <step>
                <para>Copy the certificate (for example <filename>syslog-ng.cert</filename>) of the syslog-ng server to the syslog-ng server host, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/cert.d</filename> directory. The certificate must be a valid X.509 certificate in PEM format.</para>
            </step>
            <step>
                <para>Copy the private key (for example <filename>syslog-ng.key</filename>) matching the certificate of the syslog-ng server to the syslog-ng server host, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/key.d</filename> directory. The key must be in PEM format, and must not be password-protected.</para>
            </step>
            <step>
                <para>Add a source statement to the syslog-ng configuration file that uses the <userinput>tls( key-file(key_file_fullpathname) cert-file(cert_file_fullpathname) )</userinput> option and specify the key and certificate files. The source must use the source driver (<parameter>network()</parameter> or <parameter>syslog()</parameter>) matching the destination driver used by the syslog-ng client.</para>
                <example>
                    <title>A source statement using TLS</title>
                    <para>The following source receives log messages encrypted using TLS, arriving to the <userinput>1999/TCP</userinput> port of any interface of the syslog-ng server.</para>
                    <synopsis>source demo_tls_source {
    network(ip(0.0.0.0) port(1999)
        transport("tls")
               tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
             cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert"))
    );
};</synopsis>
                    <para>A similar source for receiving messages using the IETF-syslog protocol:</para>
                    <synopsis>source demo_tls_syslog_source {
                    syslog(ip(0.0.0.0) port(1999)
                    transport("tls")
                    tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
             cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert"))
    );
};</synopsis>
                </example>
            </step>
            <step>
                <para>Disable mutual authentication for the source by setting the following TLS option in the source statement: <userinput>tls( peer-verify(optional-untrusted);</userinput></para>
                <para>For details on how to configure mutual authentication, see <xref linkend="tls-mutualauth"/>.</para>
                <para>For the details of the available <parameter>tls()</parameter> options, see <xref linkend="tlsoptions"/>.</para>
                <example>
                    <title>Disabling mutual authentication</title>
                    <para>The following source receives log messages encrypted using TLS, arriving to the <userinput>1999/TCP</userinput> port of any interface of the syslog-ng server. The identity of the syslog-ng client is not verified.</para>
                    <synopsis>source demo_tls_source {
    network(ip(0.0.0.0) port(1999)
        transport("tls")
               tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
                    cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert")
             peer-verify(optional-untrusted))
    );
};</synopsis>
                    <para>A similar source for receiving messages using the IETF-syslog protocol:</para>
                    <synopsis>source demo_tls_syslog_source {
                        syslog(ip(0.0.0.0) port(1999)
                        transport("tls")
                        tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
                        cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert")
             peer-verify(optional-untrusted))
    );
};</synopsis>
                </example>
                <warning>
                    <para>Do not forget to update the certificate and key files when they expire.</para>
                </warning>
            </step>
        </procedure>
    </section>
    <section xml:id="tls-mutualauth">
        <title>Mutual authentication using TLS</title>
        <indexterm> <primary>TLS</primary> <secondary>configuring</secondary> </indexterm>
        <indexterm> <primary>mutual authentication</primary> </indexterm>
        <para>This section describes how to configure mutual authentication between the syslog-ng server and the client. Configuring mutual authentication is similar to configuring TLS (for details, see <xref linkend="tls-serverauth"/>), but the server verifies the identity of the client as well. Therefore, each client must have a certificate, and the server must have the certificate of the CA that issued the certificate of the clients. For the concepts of using TLS in syslog-ng, see <xref linkend="concepts-tls"/>.</para>
        <procedure xml:id="procedure-configuring-mutual-tls-client">
            <title>Configuring TLS on the syslog-ng clients</title>
            <formalpara>
                <title>Purpose:</title>
                <para/>
            </formalpara>
            <para>Complete the following steps on every syslog-ng client host. Examples are provided using both the legacy BSD-syslog protocol (using the <parameter>network()</parameter> driver) and the new IETF-syslog protocol standard (using the <parameter>syslog()</parameter> driver):</para>
            <formalpara>
                <title>Steps:</title>
                <para/>
            </formalpara>
            <step>
                <para>Create an X.509 certificate for the syslog-ng client.<!--The
                        <parameter>subject_alt_name</parameter> parameter (or the <parameter>Common
                        Name</parameter> parameter if the <parameter>subject_alt_name</parameter>
                    parameter is empty) must contain the hostname or the IP address (as resolved
                    from the syslog-ng clients and relays) of the client.--></para>
            </step>
            <step>
                <para>Copy the certificate (for example <filename>client_cert.pem</filename>) and the matching private key (for example <filename>client.key</filename>) to the syslog-ng client host, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/cert.d</filename> directory. The certificate must be a valid X.509 certificate in PEM format and must not be password-protected.</para>
            </step>
            <step>
                <para>Copy the CA certificate of the Certificate Authority (for example <filename>cacert.pem</filename>) that issued the certificate of the syslog-ng server (or the self-signed certificate of the syslog-ng server) to the syslog-ng client hosts, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/ca.d</filename> directory.</para>
                <para>Issue the following command on the certificate: <command>openssl x509 -noout -hash -in cacert.pem</command> The result is a hash (for example <userinput>6d2962a8</userinput>), a series of alphanumeric characters based on the Distinguished Name of the certificate.</para>
                <para>Issue the following command to create a symbolic link to the certificate that uses the hash returned by the previous command and the <userinput>.0</userinput> suffix.</para>
                <para><command>ln -s cacert.pem 6d2962a8.0</command></para>
            </step>
            <step>
                <para>Add a destination statement to the syslog-ng configuration file that uses the <userinput>tls( ca-dir(path_to_ca_directory) )</userinput> option and specify the directory using the CA certificate. The destination must use the <parameter>network()</parameter> or the <parameter>syslog()</parameter> destination driver, and the IP address and port parameters of the driver must point to the syslog-ng server. Include the client's certificate and private key in the <parameter>tls()</parameter> options.</para>
                <example>
                    <title>A destination statement using mutual authentication</title>
                    <para>The following destination encrypts the log messages using TLS and sends them to the <userinput>1999/TCP</userinput> port of the syslog-ng server having the <userinput>10.1.2.3</userinput> IP address. The private key and the certificate file authenticating the client is also specified.</para>
                    <synopsis>destination demo_tls_destination {
    network("10.1.2.3" port(1999)
        transport("tls")
        tls( ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d")
             key-file("/opt/syslog-ng/etc/syslog-ng/key.d/client.key")
             cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/client_cert.pem")) ); };</synopsis>
                    <synopsis>destination demo_tls_syslog_destination {
    syslog("10.1.2.3" port(1999)
        transport("tls")
            tls( ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d")
                 key-file("/opt/syslog-ng/etc/syslog-ng/key.d/client.key")
                 cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/client_cert.pem")) ); };</synopsis>
                </example>
            </step>
            <step>
                <para>Include the destination created in Step 2 in a log statement.</para>
                <warning>
                    <para>The encrypted connection between the server and the client fails if the <parameter>Common Name</parameter> or the <parameter>subject_alt_name</parameter> parameter of the server certificate does not the hostname or the IP address (as resolved from the syslog-ng clients and relays) of the server.</para>
                    <para>Do not forget to update the certificate files when they expire.</para>
                </warning>
            </step>
        </procedure>
        <procedure xml:id="procedure-configuring-mutual-tls-server">
            <title>Configuring TLS on the syslog-ng server</title>
            <formalpara>
                <title>Purpose:</title>
                <para/>
            </formalpara>
            <para>Complete the following steps on the syslog-ng server:</para>
            <formalpara>
                <title>Steps:</title>
                <para/>
            </formalpara>
            <step>
                <para>Copy the certificate (for example <filename>syslog-ng.cert</filename>) of the syslog-ng server to the syslog-ng server host, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/cert.d</filename> directory. The certificate must be a valid X.509 certificate in PEM format.</para>
            </step>
            <step>
                <para>Copy the CA certificate (for example <filename>cacert.pem</filename>) of the Certificate Authority that issued the certificate of the syslog-ng clients to the syslog-ng server, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/ca.d</filename> directory.</para>
                <para>Issue the following command on the certificate: <command>openssl x509 -noout -hash -in cacert.pem</command> The result is a hash (for example <userinput>6d2962a8</userinput>), a series of alphanumeric characters based on the Distinguished Name of the certificate.</para>
                <para>Issue the following command to create a symbolic link to the certificate that uses the hash returned by the previous command and the <userinput>.0</userinput> suffix.</para>
                <para><command>ln -s cacert.pem 6d2962a8.0</command></para>
            </step>
            <step>
                <para>Copy the private key (for example <filename>syslog-ng.key</filename>) matching the certificate of the syslog-ng server to the syslog-ng server host, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/key.d</filename> directory. The key must be in PEM format, and must not be password-protected.</para>
            </step>
            <step>
                <para>Add a source statement to the syslog-ng configuration file that uses the <userinput>tls( key-file(key_file_fullpathname) cert-file(cert_file_fullpathname) )</userinput> option and specify the key and certificate files. The source must use the source driver (<parameter>network()</parameter> or <parameter>syslog()</parameter>) matching the destination driver used by the syslog-ng client. Also specify the directory storing the certificate of the CA that issued the client's certificate.</para>
                <para>For the details of the available <parameter>tls()</parameter> options, see <xref linkend="tlsoptions"/>.</para>
                <example>
                    <title>A source statement using TLS</title>
                    <para>The following source receives log messages encrypted using TLS, arriving to the <userinput>1999/TCP</userinput> port of any interface of the syslog-ng server.</para>
                    <synopsis>source demo_tls_source {
    network(ip(0.0.0.0) port(1999)
        transport("tls")
               tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
                    cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert")
                    ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d")) ); };</synopsis>
                    <para>A similar source for receiving messages using the IETF-syslog protocol:</para>
                    <synopsis>source demo_tls_syslog_source {
                        syslog(ip(0.0.0.0) port(1999)
                        transport("tls")
                        tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
                        cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert")
                        ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d")) ); };</synopsis>
                </example>
                <warning>
                    <!--<para>The encrypted connection between the server and the client fails if the
                            <parameter>Common Name</parameter> or the
                        <parameter>subject_alt_name</parameter> parameter of the client certificate
                        does not the hostname or the IP address (as resolved from the syslog-ng
                        clients and relays) of the server.</para>-->
                    <para>Do not forget to update the certificate and key files when they expire.</para>
                </warning>
            </step>
        </procedure>
    </section>
    <section xml:id="tlsoptions">
        <title>TLS options</title>
        <indexterm> <primary>TLS</primary> <secondary>reference</secondary> </indexterm>
        <para>The syslog-ng application can encrypt incoming and outgoing syslog message flows using TLS if you use the <parameter>network()</parameter> or <parameter>syslog()</parameter> drivers.</para>
        <note>
            <para>The format of the TLS connections used by syslog-ng is similar to using syslog-ng and stunnel, but the source IP information is not lost.</para>
        </note>
        <para>To encrypt connections, use the <parameter>transport("tls")</parameter> and <parameter>tls()</parameter> options in the source and destination statements.</para>
        <para>The tls() option can include the following settings:</para>
        <simplesect xml:id="tls-options-ca-dir">
            <xi:include href="../../common/chunk/option-destination-tls-ca-dir.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="tls-options-cert-file">
            <xi:include href="../../common/chunk/option-destination-tls-cert-file.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="tls-options-cipher-suite">
            <xi:include href="../../common/chunk/option-destination-tls-cipher-suite.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="tls-options-crl-dir">
            <title>crl-dir()</title>
            <indexterm type="parameter"> <primary>crl-dir()</primary> </indexterm>
            <indexterm> <primary>crl_dir()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>Directory name</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Name of a directory that contains the Certificate Revocation Lists for trusted CAs. Similarly to <parameter>ca-dir()</parameter> files, use the 32-bit hash of the name of the issuing CAs as filenames. The extension of the files must be <userinput>.r0</userinput>.</para>
        </simplesect>
        <simplesect xml:id="tls-options-dhparam-file">
            <xi:include href="../../common/chunk/option-tls-option-dhparam-file.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="tls-options-ecdh-curve-list">
            <title>ecdh-curve-list()</title>
            <indexterm type="parameter"> <primary>ecdh-curve-list()</primary> </indexterm>
            <indexterm> <primary>ecdh-curve-list()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry> string [colon-separated list]</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>none </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> A colon-separated list that specifies the curves that are permitted in the connection when using Elliptic Curve Cryptography (ECC). </para>
            <para>This option is only available when syslog-ng is compiled with OpenSSL version 1.0.2 or later. In the case of older versions, prime256v1 (NIST P-256) is used.</para>
            <para>The following example curves work for all versions of OpenSSL that are equal to or later than version 1.0.2:</para>
            <synopsis>ecdh-curve-list("prime256v1:secp384r1")</synopsis>
        </simplesect>
        <simplesect xml:id="tls-options-key-file">
            <xi:include href="../../common/chunk/option-destination-tls-key-file.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="tls-options-peer-verify">
            <title>peer-verify()</title>
            <indexterm type="parameter"> <primary>peer-verify()</primary> </indexterm>
            <indexterm> <primary>peer_verify()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry><userinput>optional-trusted</userinput> | <userinput>optional-untrusted</userinput> | <userinput>required-trusted</userinput> | <userinput>required-untrusted | <userinput>yes</userinput> | <userinput>no</userinput></userinput> </entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry><userinput>required-trusted</userinput> </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Verification method of the peer, the four possible values is a combination of two properties of validation:</para>
            <itemizedlist>
                <listitem>
                    <para>whether the peer is required to provide a certificate (required or optional prefix), and</para>
                </listitem>
                <listitem>
                    <para>whether the certificate provided needs to be valid or not.</para>
                </listitem>
            </itemizedlist>
            <para>The following table summarizes the possible options and their results depending on the certificate of the peer.</para>
            <informaltable>
                <tgroup cols="5">
                    <colspec colnum="1" colname="col1"/>
                    <colspec colnum="2" colname="col2"/>
                    <colspec colnum="3" colname="col3"/>
                    <colspec colnum="4" colname="col4"/>
                    <colspec colnum="5" colname="col5"/>
                    <thead>
                        <row>
                            <entry namest="col1" nameend="col2" morerows="1"/>
                            <entry namest="col3" nameend="col5" align="center">The remote peer has:</entry>
                        </row>
                        <row>
                            <entry align="center"> no certificate </entry>
                            <entry align="center"> invalid certificate </entry>
                            <entry align="center"> valid certificate </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry morerows="3" rotate="1" valign="middle">
                                <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">Local peer-verify() setting</emphasis> </entry>
                            <entry align="center">
                                <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">optional-untrusted</emphasis> </entry>
                            <entry> TLS-encryption </entry>
                            <entry> TLS-encryption </entry>
                            <entry> TLS-encryption </entry>
                        </row>
                        <row>
                            <entry align="center">
                                <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">optional-trusted</emphasis> </entry>
                            <entry> TLS-encryption </entry>
                            <entry> rejected connection </entry>
                            <entry> TLS-encryption </entry>
                        </row>
                        <row>
                            <entry align="center">
                                <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">required-untrusted</emphasis> </entry>
                            <entry> rejected connection </entry>
                            <entry> TLS-encryption </entry>
                            <entry> TLS-encryption </entry>
                        </row>
                        <row>
                            <entry align="center">
                                <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">required-trusted</emphasis> </entry>
                            <entry> rejected connection </entry>
                            <entry> rejected connection </entry>
                            <entry> TLS-encryption </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <xi:include href="../../common/chunk/option-destination-tls-peer-verify-notes.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <para>Starting with &abbrev; version <phrase condition="ose">3.10</phrase>, you can also use a simplified configuration method for the <parameter>peer-verify</parameter> option, simply setting it to <userinput>yes</userinput> or <userinput>no</userinput>. The following table summarizes the possible options and their results depending on the certificate of the peer.</para>
            <xi:include href="../../common/chunk/option-tls-peer-verify-yesno.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="tls-options-pkcs12-file">
            <title>pkcs12-file()</title>
            <indexterm type="parameter"> <primary>pkcs12-file()</primary> </indexterm>
            <indexterm> <primary>pkcs12-file()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>Filename</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> The name of a <filename>PKCS #12</filename> file that contains an unencrypted private key, an X.509 certificate, and an optional set of trusted CA certificates. </para>
            <para>If this option is used in the configuration, the value of <parameter>key-file()</parameter> and <parameter>cert-file()</parameter> will be omitted.</para>
            <para>You can use the <parameter>ca-dir()</parameter> option together with <parameter>pkcs12-file()</parameter>. However, this is optional because the <filename>PKCS #12</filename> file may contain CA certificates as well.</para>
            <para>Passphrase is currently not supported.</para>
            <example>
                <title>Using <parameter>pkcs12-file()</parameter></title>
                <para>In the following example, the first command creates a single <filename>PKCS #12</filename> file from the private key, X.509 certificate, and CA certificate files. Then, the second half of the example uses the same <filename>PKCS #12</filename> file in the syslog-ng configuration.</para>
                <formalpara>
                    <title>Example:</title>
                    <para/>
                </formalpara>
                <synopsis>$ openssl pkcs12 -export -inkey server.key -in server.crt -certfile ca.crt -out server.p12</synopsis>
                <formalpara>
                    <title>Example configuration:</title>
                    <para/>
                </formalpara>
                <synopsis>source s_tls {
    syslog(
        transport(tls)
        tls(
            pkcs12-file("/path/to/server.p12")
            ca-dir("/path/to/cadir") # optional
            peer-verify(yes)
        )
    );
};</synopsis>
            </example>
        </simplesect>
        <simplesect xml:id="tls-options-ssl-options">
            <title>ssl-options()</title>
            <indexterm type="parameter"> <primary>ssl-options()</primary> </indexterm>
            <indexterm> <primary>ssl_options()</primary> </indexterm>
            <indexterm> <primary>disable SSL</primary> </indexterm>
            <indexterm> <primary>disabling SSL</primary> </indexterm>
            <indexterm> <primary>disable TLS</primary> </indexterm>
            <indexterm> <primary>disabling TLS</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>comma-separated list of the following options: no-sslv2, no-sslv3, no-tlsv1, no-tlsv11, no-tlsv12, none</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>no-sslv2</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Sets the specified options of the SSL/TLS protocols. Currently, you can use it to disable specific protocol versions. Note that disabling a newer protocol version (for example, TLSv1.1) does not automatically disable older versions of the same protocol (for example, TLSv1.0). For example, use the following option to permit using only TLSv1.1 or newer:</para>
            <indexterm> <primary>disable SSL</primary> </indexterm>
            <synopsis>ssl-options(no-sslv2, no-sslv3, no-tlsv1)</synopsis>
            <para>Using <userinput>ssl-options(none)</userinput> means that &abbrev; does not specify any restrictions on the protocol used. However, in this case, the underlying OpenSSL library can restrict the available protocols, for example, certain OpenSSL versions automatically disable SSLv2.</para>
            <para>This option is available in &abbrev; <phrase condition="ose">3.7</phrase><phrase condition="pe">5 F4</phrase> and newer.</para>
            <example>
                <title>Using <parameter>ssl-options</parameter></title>
                <para>The following destination explicitly disables SSL and TLSv1.0</para>
                <synopsis>destination demo_tls_destination {
    network("172.16.177.147" port(6514)
    transport("tls")
    tls( ca-dir("/etc/syslog-ng/ca.d")
         key-file("/etc/syslog-ng/cert.d/clientkey.pem")
         cert-file("/etc/syslog-ng/cert.d/clientcert.pem")
         ssl-options(no-sslv2, no-sslv3, no-tlsv1) )
    ); };</synopsis>
            </example>
        </simplesect>
        <simplesect xml:id="tls-options-trusted-dn">
            <title>trusted-dn()</title>
            <indexterm type="parameter"> <primary>trusted-dn()</primary> </indexterm>
            <indexterm> <primary>trusted_dn()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>list of accepted distinguished names</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> To accept connections only from hosts using certain certificates signed by the trusted CAs, list the distinguished names of the accepted certificates in this parameter. For example using <userinput>trusted-dn("*, O=Example Inc, ST=Some-State, C=*")</userinput> will accept only certificates issued for the <userinput>Example Inc</userinput> organization in <userinput>Some-State</userinput> state.</para>
        </simplesect>
        <simplesect xml:id="tls-options-trusted-keys">
            <title>trusted-keys()</title>
            <indexterm type="parameter"> <primary>trusted-keys()</primary> </indexterm>
            <indexterm> <primary>trusted_keys()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>list of accepted SHA-1 fingerprints</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> To accept connections only from hosts using certain certificates having specific SHA-1 fingerprints, list the fingerprints of the accepted certificates in this parameter. For example <userinput>trusted-keys("SHA1:00:EF:ED:A4:CE:00:D1:14:A4:AB:43:00:EF:00:91:85:FF:89:28:8F", "SHA1:0C:42:00:3E:B2:60:36:64:00:E2:83:F0:80:46:AD:00:A8:9D:00:15")</userinput>.</para>
            <para>To find the fingerprint of a certificate, you can use the following command: <command>openssl x509 -in &lt;certificate-filename&gt; -sha1 -noout -fingerprint</command></para>
            <note>
                <para>When using the <parameter>trusted-keys()</parameter> and <parameter>trusted-dn()</parameter> parameters, note the following:</para>
                <itemizedlist>
                    <listitem>
                        <para>First, the <parameter>trusted-keys()</parameter> parameter is checked. If the fingerprint of the peer is listed, the certificate validation is performed.</para>
                    </listitem>
                    <listitem>
                        <para>If the fingerprint of the peer is not listed in the <parameter>trusted-keys()</parameter> parameter, the <parameter>trusted-dn()</parameter> parameter is checked. If the DN of the peer is not listed in the <parameter>trusted-dn()</parameter> parameter, the authentication of the peer fails and the connection is closed.</para>
                    </listitem>
                </itemizedlist>
            </note>
        </simplesect>
    </section>
</chapter>
